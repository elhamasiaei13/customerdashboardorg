{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport \"./DateTimeInput.css\";\nimport Years from './Picker/Years';\nimport Months from './Picker/Months';\nimport Days from './Picker/Days';\nimport Hours from './Picker/Hours';\nimport Minutes from './Picker/Minutes';\nimport jalaali from 'jalaali-js';\nimport { calcFirstDayOfMonth, isNotEqualDate, gregorianMonthLength } from './dateUtils';\nimport { createPortal } from 'react-dom';\nvar modalRoot = null;\n\nvar DatePicker = /*#__PURE__*/function (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker(props) {\n    var _divRef$current, _document;\n\n    var _this;\n\n    _classCallCheck(this, DatePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatePicker).call(this, props));\n\n    _this.componentDidMount = function () {\n      if (document && document.body && document.body.style) document.body.style.overflow = 'hidden';\n    };\n\n    _this.componentWillUnmount = function () {\n      if (document && document.body && document.body.style) document.body.style.overflow = '';\n    };\n\n    _this.cancelPicker = function (e) {\n      e.preventDefault();\n\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n\n      _this.props.cancelHandler();\n    };\n\n    _this.daysClicked = function (dayDate) {\n      if (isNotEqualDate(_this.state.selectedDay, dayDate)) {\n        var newDate;\n\n        if (_this.props.pickTime) {\n          var _this$state = _this.state,\n              selectedHour = _this$state.selectedHour,\n              selectedMinute = _this$state.selectedMinute;\n          newDate = new Date(dayDate.getTime());\n          newDate.setHours(selectedHour);\n          newDate.setMinutes(selectedMinute);\n        } else {\n          newDate = new Date(Date.UTC(dayDate.getFullYear(), dayDate.getMonth(), dayDate.getDate(), 0, 0));\n        }\n\n        _this.setState({\n          selectedDay: newDate\n        }, _this.fireChange);\n      } else {\n        _this.props.cancelHandler();\n      }\n    };\n\n    _this.fireChange = function () {\n      _this.props.onChange({\n        target: {\n          name: _this.props.name,\n          value: _this.state.selectedDay\n        }\n      });\n    };\n\n    _this.monthsClicked = function (month) {\n      var _this$state2 = _this.state,\n          selectedYear = _this$state2.selectedYear,\n          gregorian = _this$state2.gregorian;\n      var currentMonth, daysCount, selectedMonthFirstDay;\n\n      if (month === 0) {\n        currentMonth = 12;\n        selectedYear = selectedYear - 1;\n      } else if (month === 13) {\n        currentMonth = 1;\n        selectedYear = selectedYear + 1;\n      } else {\n        currentMonth = month;\n      }\n\n      daysCount = gregorian ? gregorianMonthLength(selectedYear, currentMonth) : jalaali.jalaaliMonthLength(selectedYear, currentMonth);\n      selectedMonthFirstDay = calcFirstDayOfMonth(selectedYear, currentMonth, gregorian);\n\n      _this.setState({\n        currentMonth: currentMonth,\n        daysCount: daysCount,\n        selectedYear: selectedYear,\n        selectedMonthFirstDay: selectedMonthFirstDay\n      });\n    };\n\n    _this.yearSelected = function (selectedYear) {\n      var selectedMonthFirstDay, daysCount;\n      selectedMonthFirstDay = calcFirstDayOfMonth(selectedYear, _this.state.currentMonth, _this.state.gregorian);\n      daysCount = _this.state.gregorian ? gregorianMonthLength(selectedYear, _this.state.currentMonth) : jalaali.jalaaliMonthLength(selectedYear, _this.state.currentMonth);\n\n      _this.setState({\n        selectedYear: selectedYear,\n        selectedMonthFirstDay: selectedMonthFirstDay,\n        daysCount: daysCount\n      });\n    };\n\n    _this.hourSelected = function (selectedHour) {\n      var selectedDay = _this.state.selectedDay;\n\n      if (selectedDay) {\n        selectedDay.setHours(selectedHour);\n      }\n\n      _this.setState({\n        selectedDay: selectedDay,\n        selectedHour: selectedHour\n      }, _this.fireChange);\n    };\n\n    _this.minuteSelected = function (selectedMinute) {\n      var selectedDay = _this.state.selectedDay;\n\n      if (selectedDay) {\n        selectedDay.setMinutes(selectedMinute);\n      }\n\n      _this.setState({\n        selectedDay: selectedDay,\n        selectedMinute: selectedMinute\n      }, _this.fireChange);\n    };\n\n    _this.gregorianPicker = function () {\n      var gregorian = !_this.state.gregorian;\n      var selectedDay = _this.state.selectedDay;\n      var currentMonth, daysCount, selectedYear, selectedMonthFirstDay;\n\n      if (gregorian) {\n        var j = selectedDay ? selectedDay : new Date();\n        selectedYear = j.getFullYear();\n        currentMonth = j.getMonth() + 1;\n      } else {\n        var _j = jalaali.toJalaali(selectedDay ? selectedDay : new Date());\n\n        selectedYear = _j.jy;\n        currentMonth = _j.jm;\n      }\n\n      daysCount = gregorian ? gregorianMonthLength(selectedYear, currentMonth) : jalaali.jalaaliMonthLength(selectedYear, currentMonth);\n      selectedMonthFirstDay = calcFirstDayOfMonth(selectedYear, currentMonth, gregorian);\n\n      _this.setState({\n        gregorian: gregorian,\n        currentMonth: currentMonth,\n        daysCount: daysCount,\n        selectedYear: selectedYear,\n        selectedMonthFirstDay: selectedMonthFirstDay\n      });\n    };\n\n    if (!modalRoot) {\n      modalRoot = document.createElement('div'); // modalRoot.className = 'JDialogModal';\n\n      document.body.appendChild(modalRoot);\n    }\n\n    var _gregorian = props.gregorian,\n        _selectedDay = props.selectedDay,\n        _props$pickTime = props.pickTime,\n        pickTime = _props$pickTime === void 0 ? false : _props$pickTime,\n        style = props.style,\n        ltr = props.ltr,\n        divRef = props.divRef;\n    var currentDay = _selectedDay;\n\n    if (!currentDay) {\n      currentDay = new Date();\n    } else {\n      currentDay = new Date(currentDay.getTime());\n    }\n\n    if (!pickTime) {\n      currentDay.setHours(0);\n      currentDay.setMinutes(0);\n    } // currentDay.setSeconds(0);\n\n\n    var _selectedYear, _currentMonth, _selectedMonthFirstDay, _daysCount, _selectedHour, _selectedMinute;\n\n    if (_gregorian) {\n      var j = currentDay;\n      _selectedYear = j.getFullYear();\n      _currentMonth = j.getMonth() + 1;\n    } else {\n      var _j2 = jalaali.toJalaali(currentDay);\n\n      _selectedYear = _j2.jy;\n      _currentMonth = _j2.jm;\n    }\n\n    _daysCount = _gregorian ? gregorianMonthLength(_selectedYear, _currentMonth) : jalaali.jalaaliMonthLength(_selectedYear, _currentMonth);\n    _selectedMonthFirstDay = calcFirstDayOfMonth(_selectedYear, _currentMonth, _gregorian);\n    _selectedHour = currentDay.getHours();\n    _selectedMinute = currentDay.getMinutes(); // console.log({selectedDay})\n\n    var myStyle = style;\n\n    if ((divRef === null || divRef === void 0 ? void 0 : (_divRef$current = divRef.current) === null || _divRef$current === void 0 ? void 0 : _divRef$current.getBoundingClientRect) && ((_document = document) === null || _document === void 0 ? void 0 : _document.documentElement)) {\n      var rect = divRef.current.getBoundingClientRect();\n      var ww = document.documentElement.clientWidth;\n      var wh = document.documentElement.clientHeight;\n      var dialogHeight = pickTime ? 435 : 330;\n      var dialogWidth = 320;\n      myStyle = _objectSpread({}, style, {\n        // position: 'fixed',\n        top: rect.top + rect.height + 5\n      });\n      if (myStyle.top < 10) myStyle.top = 10;\n      if (myStyle.top + dialogHeight > wh) myStyle.top = wh - dialogHeight; // const wh = (window.innerHeight || document.documentElement.clientHeight);\n      // const ww = (window.innerWidth || document.documentElement.clientWidth);\n      // debugger;\n\n      if (ltr) {\n        myStyle.left = rect.left;\n        myStyle.right = 'unset';\n        if (myStyle.left < 10) myStyle.left = 10;\n        if (myStyle.left + dialogWidth > ww) myStyle.left = ww - dialogWidth;\n      } else {\n        myStyle.left = 'unset';\n        myStyle.right = ww - rect.right;\n        if (myStyle.right < 10) myStyle.right = 10;\n        if (myStyle.right + dialogWidth > ww) myStyle.right = ww - dialogWidth;\n      }\n    }\n\n    _this.state = {\n      gregorian: _gregorian,\n      selectedYear: _selectedYear,\n      currentMonth: _currentMonth,\n      selectedMonthFirstDay: _selectedMonthFirstDay,\n      daysCount: _daysCount,\n      selectedDay: _selectedDay ? _selectedDay : null,\n      selectedHour: _selectedHour,\n      selectedMinute: _selectedMinute,\n      style: myStyle\n    };\n    return _this;\n  }\n\n  _createClass(DatePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          _this$props$closeLabe = _this$props.closeLabel,\n          closeLabel = _this$props$closeLabe === void 0 ? 'بستن' : _this$props$closeLabe,\n          filterDate = _this$props.filterDate,\n          ltr = _this$props.ltr,\n          _this$props$pickTime = _this$props.pickTime,\n          pickTime = _this$props$pickTime === void 0 ? false : _this$props$pickTime;\n      var _this$state3 = this.state,\n          gregorian = _this$state3.gregorian,\n          daysCount = _this$state3.daysCount,\n          selectedDay = _this$state3.selectedDay,\n          currentMonth = _this$state3.currentMonth,\n          selectedYear = _this$state3.selectedYear,\n          selectedMonthFirstDay = _this$state3.selectedMonthFirstDay,\n          selectedHour = _this$state3.selectedHour,\n          selectedMinute = _this$state3.selectedMinute,\n          style = _this$state3.style;\n      return createPortal(React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: 'OutSideClick',\n        onClick: this.cancelPicker\n      }, \" \"), React.createElement(\"div\", {\n        className: \"JDatePicker\".concat(ltr ? ' ltr' : '', \" \").concat(className ? className : ''),\n        style: style,\n        onClick: function onClick(e) {\n          e.preventDefault();\n        }\n      }, React.createElement(Years, {\n        gregorian: gregorian,\n        changeEvent: function changeEvent(returnedYear) {\n          return _this2.yearSelected(returnedYear);\n        },\n        year: selectedYear\n      }), React.createElement(Months, {\n        gregorian: gregorian,\n        clickEvent: function clickEvent(returnedMonth) {\n          return _this2.monthsClicked(returnedMonth);\n        },\n        month: currentMonth\n      }), React.createElement(\"div\", {\n        className: \"days-titles\"\n      }, React.createElement(\"div\", null, \"\\u0634\"), React.createElement(\"div\", null, \"\\u06CC\"), React.createElement(\"div\", null, \"\\u062F\"), React.createElement(\"div\", null, \"\\u0633\"), React.createElement(\"div\", null, \"\\u0686\"), React.createElement(\"div\", null, \"\\u067E\"), React.createElement(\"div\", null, \"\\u062C\")), React.createElement(Days, {\n        gregorian: gregorian,\n        selectedYear: selectedYear,\n        selectedDay: selectedDay,\n        currentMonth: currentMonth,\n        daysCount: daysCount,\n        firstDay: selectedMonthFirstDay,\n        clickEvent: this.daysClicked,\n        filterDate: filterDate\n      }), pickTime && React.createElement(\"div\", {\n        className: \"JC-Clock\"\n      }, React.createElement(Hours, {\n        changeEvent: function changeEvent(returnedHour) {\n          return _this2.hourSelected(returnedHour);\n        },\n        hour: selectedHour\n      }), \"\\xA0:\\xA0\", React.createElement(Minutes, {\n        changeEvent: function changeEvent(returnedMinute) {\n          return _this2.minuteSelected(returnedMinute);\n        },\n        minute: selectedMinute\n      })), React.createElement(\"div\", {\n        className: \"JC-Buttons\"\n      }, React.createElement(\"button\", {\n        onClick: this.cancelPicker\n      }, closeLabel), !gregorian && React.createElement(\"button\", {\n        onClick: this.gregorianPicker\n      }, 'میلادی'), gregorian && React.createElement(\"button\", {\n        onClick: this.gregorianPicker\n      }, 'شمسی')))), modalRoot);\n    }\n  }]);\n\n  return DatePicker;\n}(Component);\n\nexport default DatePicker;","map":null,"metadata":{},"sourceType":"module"}