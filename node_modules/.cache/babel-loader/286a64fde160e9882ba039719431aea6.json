{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/container/ResetPass.js\";\nimport React, { Component } from 'react';\nimport FormInput from '../presentational/input/FormInput';\nimport Row from '../presentational/Row';\nimport Col from '../presentational/Col';\nimport Button from '../presentational/button/Button';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport InputGroup from '../presentational/input/InputGroup';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../store/Action';\nimport Axios from 'axios';\nimport { FormattedMessage } from 'react-intl';\n\nclass ResetPass extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.state = {\n      currrentPassword: '',\n      newPassword: '',\n      repeatNewPasswords: '',\n      validationClass: ''\n    };\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.TOGGLE_MESSAGE({\n      show: false,\n      content: \"\"\n    });\n  }\n\n  onChange(event) {\n    const {\n      newPassword,\n      repeatNewPasswords,\n      validationClass\n    } = this.state;\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n\n    if (target.name == \"repeatNewPasswords\") {\n      if (newPassword === target.value) {\n        this.setState({\n          validationClass: \"valid\"\n        });\n      } else {\n        this.setState({\n          validationClass: \"unvalid\"\n        });\n      }\n    }\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  submit(e) {\n    e.preventDefault(); //    const { username, password } = this.state\n  }\n\n  render() {\n    const {\n      currrentPassword,\n      newPassword,\n      repeatNewPasswords,\n      validationClass\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"auth-wrapper d-flex  justify-content-center coustomer-authBox-height\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"auth-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submit,\n      className: \"form-horizontal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      type: \"password\",\n      iconName: \"ti-pencil\",\n      value: currrentPassword,\n      placeholder: \"\\u200D\\u0631\\u0645\\u0632 \\u0639\\u0628\\u0648\\u0631 \\u0641\\u0639\\u0644\\u06CC\",\n      name: \"currrentPassword\",\n      onChange: e => {\n        this.onChange(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(InputGroup, {\n      type: \"password\",\n      iconName: \"ti-pencil\",\n      value: newPassword,\n      placeholder: \"\\u0631\\u0645\\u0632 \\u0639\\u0628\\u0648\\u0631 \\u062C\\u062F\\u06CC\\u062F\",\n      name: \"newPassword\",\n      onChange: e => {\n        this.onChange(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(InputGroup // onClick={this.focusTextInput}\n    // ref={this.myRef}\n    , {\n      classNameInput: validationClass,\n      type: \"password\",\n      iconName: \"ti-pencil\",\n      value: repeatNewPasswords,\n      placeholder: \"\\u062A\\u06A9\\u0631\\u0627\\u0631 \\u0631\\u0645\\u0632 \\u0639\\u0628\\u0648\\u0631 \\u062C\\u062F\\u06CC\\u062F\",\n      name: \"repeatNewPasswords\",\n      onChange: e => {\n        this.onChange(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: React.createElement(FormattedMessage, {\n        id: \"submit\",\n        defaultMessage: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }),\n      buttonclass: \"btn btn-info waves-effect waves-light\",\n      type: \"info btn-block\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = store => {\n  return {\n    authentication: store.Reducer.authentication\n  };\n};\n\nconst mapDispachToProps = dispach => {\n  return {\n    SET_AUTHENTICATE: value => {\n      dispach(actionCreator.SET_AUTHENTICATE(value));\n    },\n    SET_USERNAME: value => {\n      dispach(actionCreator.SET_USERNAME(value));\n    },\n    SET_PASSWORD: value => {\n      dispach(actionCreator.SET_PASSWORD(value));\n    },\n    TOGGLE_MESSAGE: value => {\n      dispach(actionCreator.TOGGLE_MESSAGE(value));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(ResetPass));","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/container/ResetPass.js"],"names":["React","Component","FormInput","Row","Col","Button","Redirect","withRouter","InputGroup","connect","actionCreator","Axios","FormattedMessage","ResetPass","constructor","props","myRef","createRef","state","currrentPassword","newPassword","repeatNewPasswords","validationClass","focusTextInput","bind","componentDidMount","TOGGLE_MESSAGE","show","content","onChange","event","target","value","name","setState","textInput","current","focus","submit","e","preventDefault","render","mapStateToProps","store","authentication","Reducer","mapDispachToProps","dispach","SET_AUTHENTICATE","SET_USERNAME","SET_PASSWORD"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport FormInput from '../presentational/input/FormInput';\nimport Row from '../presentational/Row'\nimport Col from '../presentational/Col';\nimport Button from '../presentational/button/Button';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport InputGroup from '../presentational/input/InputGroup'\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../store/Action';\nimport Axios from 'axios';\nimport { FormattedMessage } from 'react-intl';\n\nclass ResetPass extends Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.state = {\n            currrentPassword: '',\n            newPassword: '',\n            repeatNewPasswords: '',\n            validationClass: ''\n\n        }\n        this.focusTextInput = this.focusTextInput.bind(this);\n    }\n    componentDidMount() {\n        this.props.TOGGLE_MESSAGE({ show: false, content: \"\" })\n\n    }\n    onChange(event) {\n        const { newPassword, repeatNewPasswords, validationClass } = this.state\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n        if (target.name == \"repeatNewPasswords\") {\n            if (newPassword === target.value) {\n                this.setState({ validationClass: \"valid\" })\n            } else {\n                this.setState({ validationClass: \"unvalid\" })\n            }\n        }\n    }\n    focusTextInput() {\n        // Explicitly focus the text input using the raw DOM API\n        // Note: we're accessing \"current\" to get the DOM node\n        this.textInput.current.focus();\n    }\n\n    submit(e) {\n        e.preventDefault()\n        //    const { username, password } = this.state\n} \n\n    render() {\n        const { currrentPassword, newPassword, repeatNewPasswords, validationClass } = this.state\n        return (\n            <div className=\"auth-wrapper d-flex  justify-content-center coustomer-authBox-height\">\n                <div className=\"auth-box\">\n                    <Row>\n                        <div className=\"col-12\">\n                            <form onSubmit={this.submit} className=\"form-horizontal\">\n                                <InputGroup\n                                    type=\"password\"\n                                    iconName=\"ti-pencil\"\n                                    value={currrentPassword}\n                                    placeholder=\"‍رمز عبور فعلی\"\n                                    name=\"currrentPassword\"\n                                    onChange={(e) => { this.onChange(e) }}\n                                />\n                                <InputGroup\n                                    type=\"password\"\n                                    iconName=\"ti-pencil\"\n                                    value={newPassword}\n                                    placeholder=\"رمز عبور جدید\"\n                                    name=\"newPassword\"\n                                    onChange={(e) => { this.onChange(e) }}\n                                />\n                                <InputGroup\n                                    // onClick={this.focusTextInput}\n                                    // ref={this.myRef}\n                                    classNameInput={validationClass}\n                                    type=\"password\"\n                                    iconName=\"ti-pencil\"\n                                    value={repeatNewPasswords}\n                                    placeholder=\"تکرار رمز عبور جدید\"\n                                    name=\"repeatNewPasswords\"\n                                    onChange={(e) => { this.onChange(e) }}\n                                />\n                                <Button\n                                    label={\n                                        <FormattedMessage\n                                            id={\"submit\"}\n                                            defaultMessage={\"submit\"}\n                                        />\n                                    }\n                                    buttonclass=\"btn btn-info waves-effect waves-light\"\n                                    type=\"info btn-block\" htmlType=\"submit\" />\n\n                            </form>\n                        </div>\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        authentication: store.Reducer.authentication,\n    }\n}\n\n\n\nconst mapDispachToProps = (dispach) => {\n    return {\n        SET_AUTHENTICATE: (value) => { dispach(actionCreator.SET_AUTHENTICATE(value)) },\n        SET_USERNAME: (value) => { dispach(actionCreator.SET_USERNAME(value)) },\n        SET_PASSWORD: (value) => { dispach(actionCreator.SET_PASSWORD(value)) },\n        TOGGLE_MESSAGE: (value) => { dispach(actionCreator.TOGGLE_MESSAGE(value)) },\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(ResetPass));\n"]},"metadata":{},"sourceType":"module"}