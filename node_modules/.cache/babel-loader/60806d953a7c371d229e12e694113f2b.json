{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nvar DEFAULT_COLON = ':';\nvar DEFAULT_VALUE_SHORT = \"00\" + DEFAULT_COLON + \"00\";\nvar DEFAULT_VALUE_FULL = \"00\" + DEFAULT_COLON + \"00\" + DEFAULT_COLON + \"00\";\nexport function isNumber(value) {\n  var number = Number(value);\n  return !isNaN(number) && String(value) === String(number);\n}\nexport function formatTimeItem(value) {\n  return ((value || '') + \"00\").substr(0, 2);\n}\nexport function validateTimeAndCursor(showSeconds, value, defaultValue, colon, cursorPosition) {\n  if (showSeconds === void 0) {\n    showSeconds = false;\n  }\n\n  if (value === void 0) {\n    value = '';\n  }\n\n  if (defaultValue === void 0) {\n    defaultValue = '';\n  }\n\n  if (colon === void 0) {\n    colon = DEFAULT_COLON;\n  }\n\n  if (cursorPosition === void 0) {\n    cursorPosition = 0;\n  }\n\n  var _a = defaultValue.split(colon),\n      oldH = _a[0],\n      oldM = _a[1],\n      oldS = _a[2];\n\n  var newCursorPosition = Number(cursorPosition);\n\n  var _b = String(value).split(colon),\n      newH = _b[0],\n      newM = _b[1],\n      newS = _b[2];\n\n  newH = formatTimeItem(newH);\n\n  if (Number(newH[0]) > 2) {\n    newH = oldH;\n    newCursorPosition -= 1;\n  } else if (Number(newH[0]) === 2) {\n    if (Number(oldH[0]) === 2 && Number(newH[1]) > 3) {\n      newH = \"2\" + oldH[1];\n      newCursorPosition -= 2;\n    } else if (Number(newH[1]) > 3) {\n      newH = '23';\n    }\n  }\n\n  newM = formatTimeItem(newM);\n\n  if (Number(newM[0]) > 5) {\n    newM = oldM;\n    newCursorPosition -= 1;\n  }\n\n  if (showSeconds) {\n    newS = formatTimeItem(newS);\n\n    if (Number(newS[0]) > 5) {\n      newS = oldS;\n      newCursorPosition -= 1;\n    }\n  }\n\n  var validatedValue = showSeconds ? \"\" + newH + colon + newM + colon + newS : \"\" + newH + colon + newM;\n  return [validatedValue, newCursorPosition];\n}\n\nvar TimeField =\n/** @class */\nfunction (_super) {\n  __extends(TimeField, _super);\n\n  function TimeField(props) {\n    var _this = _super.call(this, props) || this;\n\n    var _showSeconds = Boolean(props.showSeconds);\n\n    var _defaultValue = _showSeconds ? DEFAULT_VALUE_FULL : DEFAULT_VALUE_SHORT;\n\n    var _colon = props.colon && props.colon.length === 1 ? props.colon : DEFAULT_COLON;\n\n    var validatedTime = validateTimeAndCursor(_showSeconds, _this.props.value, _defaultValue, _colon)[0];\n    _this.state = {\n      value: validatedTime,\n      _colon: _colon,\n      _showSeconds: _showSeconds,\n      _defaultValue: _defaultValue,\n      _maxLength: _defaultValue.length\n    };\n    _this.onInputChange = _this.onInputChange.bind(_this);\n    return _this;\n  }\n\n  TimeField.prototype.componentDidUpdate = function (prevProps) {\n    if (this.props.value !== prevProps.value) {\n      var validatedTime = validateTimeAndCursor(this.state._showSeconds, this.props.value, this.state._defaultValue, this.state._colon)[0];\n      this.setState({\n        value: validatedTime\n      });\n    }\n  };\n\n  TimeField.prototype.onInputChange = function (event, callback) {\n    var oldValue = this.state.value;\n    var inputEl = event.target;\n    var inputValue = inputEl.value;\n    var position = inputEl.selectionEnd || 0;\n    var isTyped = inputValue.length > oldValue.length;\n    var cursorCharacter = inputValue[position - 1];\n    var addedCharacter = isTyped ? cursorCharacter : null;\n    var removedCharacter = isTyped ? null : oldValue[position];\n    var replacedSingleCharacter = inputValue.length === oldValue.length ? oldValue[position - 1] : null;\n    var colon = this.state._colon;\n    var newValue = oldValue;\n    var newPosition = position;\n\n    if (addedCharacter !== null) {\n      if (position > this.state._maxLength) {\n        newPosition = this.state._maxLength;\n      } else if ((position === 3 || position === 6) && addedCharacter === colon) {\n        newValue = \"\" + inputValue.substr(0, position - 1) + colon + inputValue.substr(position + 1);\n      } else if ((position === 3 || position === 6) && isNumber(addedCharacter)) {\n        newValue = \"\" + inputValue.substr(0, position - 1) + colon + addedCharacter + inputValue.substr(position + 2);\n        newPosition = position + 1;\n      } else if (isNumber(addedCharacter)) {\n        // user typed a number\n        newValue = inputValue.substr(0, position - 1) + addedCharacter + inputValue.substr(position + 1);\n\n        if (position === 2 || position === 5) {\n          newPosition = position + 1;\n        }\n      } else {\n        // if user typed NOT a number, then keep old value & position\n        newPosition = position - 1;\n      }\n    } else if (replacedSingleCharacter !== null) {\n      // user replaced only a single character\n      if (isNumber(cursorCharacter)) {\n        if (position - 1 === 2 || position - 1 === 5) {\n          newValue = \"\" + inputValue.substr(0, position - 1) + colon + inputValue.substr(position);\n        } else {\n          newValue = inputValue;\n        }\n      } else {\n        // user replaced a number on some non-number character\n        newValue = oldValue;\n        newPosition = position - 1;\n      }\n    } else if (typeof cursorCharacter !== 'undefined' && cursorCharacter !== colon && !isNumber(cursorCharacter)) {\n      // set of characters replaced by non-number\n      newValue = oldValue;\n      newPosition = position - 1;\n    } else if (removedCharacter !== null) {\n      if ((position === 2 || position === 5) && removedCharacter === colon) {\n        newValue = inputValue.substr(0, position - 1) + \"0\" + colon + inputValue.substr(position);\n        newPosition = position - 1;\n      } else {\n        // user removed a number\n        newValue = inputValue.substr(0, position) + \"0\" + inputValue.substr(position);\n      }\n    }\n\n    var _a = validateTimeAndCursor(this.state._showSeconds, newValue, oldValue, colon, newPosition),\n        validatedTime = _a[0],\n        validatedCursorPosition = _a[1];\n\n    this.setState({\n      value: validatedTime\n    }, function () {\n      inputEl.selectionStart = validatedCursorPosition;\n      inputEl.selectionEnd = validatedCursorPosition;\n      callback(event, validatedTime);\n    });\n    event.persist();\n  };\n\n  TimeField.prototype.render = function () {\n    var _this = this;\n\n    var value = this.state.value;\n\n    var _a = this.props,\n        onChange = _a.onChange,\n        style = _a.style,\n        showSeconds = _a.showSeconds,\n        input = _a.input,\n        inputRef = _a.inputRef,\n        colon = _a.colon,\n        props = __rest(_a, [\"onChange\", \"style\", \"showSeconds\", \"input\", \"inputRef\", \"colon\"]); //eslint-disable-line no-unused-vars\n\n\n    var onChangeHandler = function (event) {\n      return _this.onInputChange(event, function (e, v) {\n        return onChange && onChange(e, v);\n      });\n    };\n\n    if (input) {\n      return React.cloneElement(input, __assign(__assign({}, props), {\n        value: value,\n        style: style,\n        onChange: onChangeHandler\n      }));\n    }\n\n    return React.createElement(\"input\", __assign({\n      type: \"text\"\n    }, props, {\n      ref: inputRef,\n      value: value,\n      onChange: onChangeHandler,\n      style: __assign({\n        width: showSeconds ? 54 : 35\n      }, style)\n    }));\n  };\n\n  TimeField.defaultProps = {\n    showSeconds: false,\n    input: null,\n    style: {},\n    colon: DEFAULT_COLON\n  };\n  return TimeField;\n}(React.Component);\n\nexport default TimeField;","map":null,"metadata":{},"sourceType":"module"}