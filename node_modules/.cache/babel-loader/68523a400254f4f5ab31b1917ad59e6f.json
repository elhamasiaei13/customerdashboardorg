{"ast":null,"code":"import jalaali from 'jalaali-js';\nexport var NUMBER_FORMAT_FARSI = 'FARSI';\nexport var NUMBER_FORMAT_LATIN = 'LATIN';\nexport var DATE_SEPERATOR = '/'; // this is arabic date seperator ' ؍' but it is right to left glyph and as the numbers are left to right there will be caret position problem\n\nexport var MIDDLE_SEPERATOR = '\\xa0';\nexport var TIME_SEPERATOR = ':';\nexport var SEPERATORES_REGEX = new RegExp(\"[ \".concat(DATE_SEPERATOR, \"]\"), 'g');\nexport function isNotEqualDate(m1, m2) {\n  if (m1 && !m2 || !m1 && m2 || m1 && m2 && !isTheSameDay(m1, m2)) {\n    return true;\n  }\n\n  return false;\n}\nexport function isTheSameDay(date1, date2) {\n  if (date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate()) {\n    return true;\n  }\n\n  return false;\n}\nexport function mapToFarsi(str) {\n  if (!str && str !== 0 && str !== '0') return str;\n  return str.toString().replace(/[1234567890]/gi, function (e) {\n    return String.fromCharCode(e.charCodeAt(0) + 1728);\n  });\n}\nexport function mapToLatin(str) {\n  if (!str) return str;\n  return str.toString().replace(/[۱۲۳۴۵۶۷۸۹۰]/gi, function (e) {\n    return String.fromCharCode(e.charCodeAt(0) - 1728);\n  });\n}\nexport function stripAnyThingButDigits(str) {\n  if (!str) return str;\n  return str.toString().replace(/[^1234567890۱۲۳۴۵۶۷۸۹۰]/gi, '');\n}\nexport function inspectDay(day, selectionStart, seperatorPosition, max) {\n  var newDay = day.trim() === '' ? day : day.replace(/ /g, '0');\n  var newStartPosition = selectionStart;\n  var caretPosition = selectionStart - seperatorPosition - 1;\n  console.log({\n    day: day,\n    selectionStart: selectionStart,\n    seperatorPosition: seperatorPosition,\n    caretPosition: caretPosition\n  });\n\n  if (newDay.length > 2) {\n    // if(caretPosition<=2){\n    //   newDay = newDay.substring(0, 2);\n    //   newStartPosition = 8 + caretPosition;\n    // }else if(caretPosition>2){\n    //   newDay = newDay.substring(caretPosition-2, caretPosition);\n    //   newStartPosition = 10;\n    // }\n    // debugger;\n    newDay = newDay.substring(caretPosition - (newDay.length > 3 ? 2 : 1), caretPosition);\n\n    if (newDay.length === 1) {\n      newStartPosition = 9;\n    } else {\n      newStartPosition = 10;\n    }\n  }\n\n  if (newDay.length === 2) {\n    newStartPosition = 5;\n  }\n\n  if (newDay > max) {\n    if (caretPosition === 0) {\n      newDay = '  ';\n      newStartPosition = 10;\n    } else {\n      newDay = day.substring(caretPosition - 1, caretPosition);\n      newStartPosition = 9;\n    }\n  }\n\n  return {\n    newDay: newDay,\n    newStartPosition: newStartPosition\n  };\n}\nexport function inspectMonth(month, selectionStart, seperatorPosition) {\n  var newMonth = month.trim() === '' ? month : month.replace(/ /g, '0');\n  var newStartPosition = selectionStart;\n  var caretPosition = selectionStart - seperatorPosition - 1;\n\n  if (newMonth.length > 2) {\n    // if(caretPosition<=2){\n    //   newMonth = newMonth.substring(0, 2);\n    //   newStartPosition = 5 + caretPosition;\n    // }else if(caretPosition>2){\n    //   newMonth = newMonth.substring(caretPosition-2, caretPosition);\n    //   newStartPosition = 7;\n    // }\n    // debugger;\n    newMonth = newMonth.substring(caretPosition - (newMonth.length > 3 ? 2 : 1), caretPosition);\n\n    if (newMonth.length === 1) {\n      newStartPosition = 6;\n    } else {\n      newStartPosition = 7;\n    }\n  }\n\n  if (newMonth.length === 2) {\n    newStartPosition = 2;\n  }\n\n  if (newMonth > 12) {\n    if (caretPosition === 0) {\n      newMonth = '  ';\n      newStartPosition = 7;\n    } else {\n      newMonth = month.substring(caretPosition - 1, caretPosition);\n      newStartPosition = 6;\n    }\n  }\n\n  return {\n    newMonth: newMonth,\n    newStartPosition: newStartPosition\n  };\n}\nexport function inspectYear(year, selectionStart) {\n  var newYear = year;\n  var newStartPosition = selectionStart;\n  var caretPosition = selectionStart;\n\n  if (newYear.length > 4) {\n    if (caretPosition <= 4) {\n      newYear = newYear.substring(0, 4);\n      newStartPosition = caretPosition;\n    } else if (caretPosition > 4) {\n      newYear = newYear.substring(caretPosition - 4, caretPosition);\n      newStartPosition = 4;\n    }\n  }\n\n  return {\n    newYear: newYear,\n    newStartPosition: newStartPosition\n  };\n}\nexport function inspectHour(hour, selectionStart, seperatorPosition) {\n  var newHour = hour.trim() === '' ? hour : hour.replace(/ /g, '0');\n  var newStartPosition = selectionStart;\n  var caretPosition = selectionStart - seperatorPosition - 1;\n\n  if (newHour.length > 2) {\n    if (caretPosition <= 2) {\n      newHour = newHour.substring(0, 2);\n      newStartPosition = 11 + caretPosition;\n    } else if (caretPosition > 2) {\n      newHour = newHour.substring(caretPosition - 2, caretPosition);\n      newStartPosition = 13;\n    }\n  }\n\n  if (newHour > 23) {\n    if (caretPosition === 0) {\n      newHour = '  ';\n      newStartPosition = 13;\n    } else {\n      newHour = hour.substring(caretPosition - 1, caretPosition);\n      newStartPosition = 12;\n    }\n  }\n\n  return {\n    newHour: newHour,\n    newStartPosition: newStartPosition\n  };\n}\n;\nexport function inspectMinute(minute, selectionStart, seperatorPosition) {\n  var newMinute = minute.trim() === '' ? minute : minute.replace(/ /g, '0');\n  var newStartPosition = selectionStart;\n  var caretPosition = selectionStart - seperatorPosition - 1;\n\n  if (newMinute.length > 2) {\n    if (caretPosition <= 2) {\n      newMinute = newMinute.substring(0, 2);\n      newStartPosition = 14 + caretPosition;\n    } else if (caretPosition > 2) {\n      newMinute = newMinute.substring(caretPosition - 2, caretPosition);\n      newStartPosition = 16;\n    }\n  }\n\n  if (newMinute > 59) {\n    if (caretPosition === 0) {\n      newMinute = '  ';\n      newStartPosition = 16;\n    } else {\n      newMinute = minute.substring(caretPosition - 1, caretPosition);\n      newStartPosition = 15;\n    }\n  }\n\n  return {\n    newMinute: newMinute,\n    newStartPosition: newStartPosition\n  };\n}\nexport function readDateFromValue(value) {\n  if (!value) return '';\n\n  if (typeof value === 'string') {\n    value = mapToLatin(value);\n    var v = new Date(value);\n\n    if (v.toString() === 'Invalid Date') {\n      var d = isValueValidDateTime(value, true);\n\n      if (d) {\n        v = d;\n      } else {\n        d = isValueValidDate(value, true);\n\n        if (d) {\n          v = d;\n        }\n      }\n    }\n\n    if (v.getFullYear() < 1700) {\n      var _d = isValueValidDateTime(value, false);\n\n      if (_d) {\n        v = _d;\n      } else {\n        _d = isValueValidDate(value, false);\n\n        if (_d) {\n          v = _d;\n        }\n      }\n    }\n\n    var j = jalaali.toJalaali(v);\n    return {\n      j: j,\n      value: v\n    };\n  } else if (value instanceof Date) {\n    if (value.toString() === 'Invalid Date') return '';\n\n    var _j = jalaali.toJalaali(value);\n\n    return {\n      j: _j,\n      value: value\n    };\n  } else {\n    console.warn('unknown value type ', value);\n  }\n\n  return '';\n}\nexport function hasStringACharToGoToNext(str) {\n  if (str.indexOf('.') >= 0) return true;\n  if (str.indexOf(',') >= 0) return true; // if(str.indexOf('/')>=0) return true;\n\n  if (str.indexOf('-') >= 0) return true;\n  if (str.indexOf(';') >= 0) return true;\n  if (str.indexOf('*') >= 0) return true;\n  if (str.indexOf('#') >= 0) return true;\n  if (str.indexOf(' ') >= 0) return true;\n  if (str.indexOf('،') >= 0) return true;\n  return false;\n}\nexport function maxDayFor(year, month, gregorian) {\n  if (!month) return 31;\n  if (!year) return 31;\n  month = Number(month);\n  year = Number(year);\n\n  if (!gregorian) {\n    return jalaali.jalaaliMonthLength(year, month);\n  } else {\n    return gregorianMonthLength(year, month);\n  }\n}\nvar jalaaliBaseYear = jalaali.toJalaali(new Date()).jy.toString();\nvar gregorianBaseYear = new Date().getFullYear().toString();\nexport function baseYear(gregorian) {\n  return gregorian ? gregorianBaseYear : jalaaliBaseYear;\n}\nexport function formatJalaali(j) {\n  if (j instanceof Date) {\n    j = jalaali.toJalaali(j);\n  }\n\n  return constructdate(j.jy, j.jm, j.jd, '/');\n}\nexport function formatGregorian(g) {\n  return constructdate(g.getFullYear(), g.getMonth() + 1, g.getDate(), '/');\n}\nexport function formatTime(date) {\n  var seperator = ':';\n\n  var _minutes = date.getMinutes().toString();\n\n  _minutes = '00'.substring(0, 2 - _minutes.length) + _minutes;\n\n  var _hours = date.getHours().toString();\n\n  _hours = '00'.substring(0, 2 - _hours.length) + _hours;\n  return _hours + seperator + _minutes;\n}\nexport function constructdate(_year, _month, _day, seperator) {\n  var _yeary, _monthm, _dayd;\n\n  _dayd = _day.toString();\n  _dayd = '00'.substring(0, 2 - _dayd.length) + _dayd;\n  _monthm = _month.toString();\n  _monthm = '00'.substring(0, 2 - _monthm.length) + _monthm;\n  _yeary = _year.toString();\n  _yeary = '0000'.substring(0, 4 - _yeary.length) + _yeary;\n  return _yeary + seperator + _monthm + seperator + _dayd;\n}\nexport var isValueValidDate = function isValueValidDate(value, gregorian) {\n  if (!value) return false;\n  var splittedValue = splitDateValue(value);\n\n  if (splittedValue === '' || !splittedValue) {\n    return false;\n  }\n\n  var year = splittedValue.year,\n      month = splittedValue.month,\n      day = splittedValue.day;\n  year = Number(year);\n  month = Number(month);\n  day = Number(day);\n  if (isNaN(day) || isNaN(month) || isNaN(year)) return false;\n  if (!gregorian && (year < 1300 || year > 1450)) return false;\n  if (gregorian && (year < 1800 || year > 2150)) return false;\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if (day > maxDayFor(year, month, gregorian)) return false;\n\n  if (gregorian) {\n    var date = new Date(Date.UTC(year, month - 1, day, 0, 0));\n\n    if (date.toString() === 'Invalid Date') {\n      return false;\n    }\n\n    return date;\n  } else {\n    if (!jalaali.isValidJalaaliDate(year, month, day)) return false;\n    var g = jalaali.toGregorian(year, month, day);\n\n    var _date = new Date(Date.UTC(g.gy, g.gm - 1, g.gd, 0, 0));\n\n    return _date;\n  }\n};\nexport var isValueValidDateTime = function isValueValidDateTime(value, gregorian) {\n  if (!value) return false;\n  var splittedValue = splitDateTimeValue(value);\n\n  if (splittedValue === '' || !splittedValue) {\n    return false;\n  }\n\n  var year = splittedValue.year,\n      month = splittedValue.month,\n      day = splittedValue.day,\n      hour = splittedValue.hour,\n      minute = splittedValue.minute;\n  if (hour.trim() === '' || minute.trim() === '') return false;\n  year = Number(year);\n  month = Number(month);\n  day = Number(day);\n  hour = Number(hour);\n  minute = Number(minute);\n  if (isNaN(day) || isNaN(month) || isNaN(year) || isNaN(hour) || isNaN(minute)) return false;\n  if (!gregorian && (year < 1300 || year > 1450)) return false;\n  if (gregorian && (year < 1800 || year > 2150)) return false;\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if (day > maxDayFor(year, month, gregorian)) return false;\n  if (hour < 0 || hour >= 24) return false;\n  if (minute < 0 || minute >= 60) return false;\n\n  if (gregorian) {\n    var date = new Date(year, month - 1, day, hour, minute);\n\n    if (date.toString() === 'Invalid Date') {\n      return false;\n    }\n\n    return date;\n  } else {\n    if (!jalaali.isValidJalaaliDate(year, month, day)) return false;\n    var g = jalaali.toGregorian(year, month, day);\n\n    var _date2 = new Date(g.gy, g.gm - 1, g.gd, hour, minute);\n\n    return _date2;\n  }\n};\nexport var isValueEmpty = function isValueEmpty(value) {\n  if (value.replace(SEPERATORES_REGEX, '') === '') return true;\n  return false;\n};\nexport var splitDateValue = function splitDateValue(value) {\n  if (isValueEmpty(value)) {\n    return '';\n  }\n\n  var seperator1 = value.indexOf(DATE_SEPERATOR);\n  var seperator2 = value.indexOf(DATE_SEPERATOR, seperator1 + 1);\n\n  if (seperator1 === -1 || seperator2 === -1) {\n    return null;\n  }\n\n  var year = value.substring(0, seperator1);\n  var month = value.substring(seperator1 + 1, seperator2);\n  var day = value.substring(seperator2 + 1);\n  return {\n    year: year,\n    month: month,\n    day: day,\n    seperator1: seperator1,\n    seperator2: seperator2\n  };\n};\nexport var splitDateTimeValue = function splitDateTimeValue(value) {\n  if (isValueEmpty(value)) {\n    return '';\n  }\n\n  var seperator1 = value.indexOf(DATE_SEPERATOR);\n  var seperator2 = value.indexOf(DATE_SEPERATOR, seperator1 + 1);\n  var seperator3 = value.indexOf(MIDDLE_SEPERATOR, seperator2 + 1);\n  var seperator4 = value.indexOf(TIME_SEPERATOR, seperator3 + 1);\n\n  if (seperator1 === -1 || seperator2 === -1 || seperator3 === -1 || seperator4 === -1) {\n    return null;\n  }\n\n  var year = value.substring(0, seperator1);\n  var month = value.substring(seperator1 + 1, seperator2);\n  var day = value.substring(seperator2 + 1, seperator3);\n  var hour = value.substring(seperator3 + 1, seperator4);\n  var minute = value.substring(seperator4 + 1);\n  return {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    seperator1: seperator1,\n    seperator2: seperator2,\n    seperator3: seperator3,\n    seperator4: seperator4\n  };\n};\nexport function calcFirstDayOfMonth(year, month, gregorian) {\n  year = +year;\n  month = +month;\n  var fistDayDate;\n\n  if (gregorian) {\n    fistDayDate = new Date(year, month - 1, 1);\n  } else {\n    var firstDayJ = jalaali.toGregorian(year, month, 1);\n    fistDayDate = new Date(firstDayJ.gy, firstDayJ.gm - 1, firstDayJ.gd);\n  }\n\n  return (fistDayDate.getDay() + 1) % 7;\n}\nexport function gregorianMonthLength(year, month) {\n  return new Date(year, month, 0).getDate();\n}","map":null,"metadata":{},"sourceType":"module"}