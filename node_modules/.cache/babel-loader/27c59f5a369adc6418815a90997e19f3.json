{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport shallowEqualObjects from 'shallow-equal/objects';\nimport { isValueEmpty, isValueValidDate, splitDateValue, formatGregorian, formatJalaali, inspectYear, inspectMonth, inspectDay, mapToLatin, mapToFarsi, readDateFromValue, hasStringACharToGoToNext, maxDayFor, baseYear, NUMBER_FORMAT_LATIN, NUMBER_FORMAT_FARSI } from './dateUtils';\nimport jalaali from 'jalaali-js';\nvar DATE_SEPERATOR = '/'; // this is arabic date seperator ' ؍' but it is right to left glyph and as the numbers are left to right there will be caret position problem\n\nvar EMPTY_VALUE = \"    \".concat(DATE_SEPERATOR, \"  \").concat(DATE_SEPERATOR, \"  \");\n\nvar DateInput = /*#__PURE__*/function (_Component) {\n  _inherits(DateInput, _Component);\n\n  function DateInput(_props) {\n    var _this;\n\n    _classCallCheck(this, DateInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateInput).call(this, _props));\n\n    _this.readValuesFromProps = function (props) {\n      var j = readDateFromValue(props.value);\n      var valueIsValid = !!j;\n      var value = valueIsValid ? props.gregorian ? formatGregorian(j.value) : formatJalaali(j.j) : '';\n      var date = valueIsValid ? j.value : null;\n      var iso = valueIsValid ? j.value.toISOString() : '';\n\n      var valueToShow = _this.mapValue(value, props.numberFormat);\n\n      return {\n        value: value,\n        valueToShow: valueToShow,\n        valueIsValid: valueIsValid,\n        iso: iso,\n        date: date,\n        selectionStart: undefined,\n        selectionEnd: undefined\n      };\n    };\n\n    _this.handleFocus = function (event) {\n      if (isValueEmpty(_this.values.value)) {\n        _this.jumpToDay();\n      }\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      var splittedValue = splitDateValue(_this.values.value);\n\n      _this.updateState(_this.sanitizeValues(splittedValue, _this.values, true, true, true));\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n    };\n\n    _this.jumpToNext = function () {\n      var selectionStart = _this.inputRef.current.selectionStart;\n      var splittedValue = splitDateValue(_this.values.value);\n\n      if (_this.isCaretAtDay(splittedValue, selectionStart)) {\n        _this.updateState(_this.sanitizeValues(splittedValue, _this.values, true, false, false));\n\n        _this.jumpToMonth();\n\n        return true;\n      } else if (_this.isCaretAtMonth(splittedValue, selectionStart)) {\n        _this.updateState(_this.sanitizeValues(splittedValue, _this.values, false, true, false));\n\n        _this.jumpToYear();\n\n        return true;\n      } else if (_this.isCaretAtYear(splittedValue, selectionStart)) {\n        _this.updateState(_this.sanitizeValues(splittedValue, _this.values, false, false, true));\n      }\n\n      return false;\n    };\n\n    _this.jumpToPrevious = function () {\n      var selectionStart = _this.inputRef.current.selectionStart;\n      var splittedValue = splitDateValue(_this.values.value);\n\n      if (_this.isCaretAtDay(splittedValue, selectionStart)) {\n        _this.updateState(_this.sanitizeValues(splittedValue, _this.values, true, false, false));\n      } else if (_this.isCaretAtMonth(splittedValue, selectionStart)) {\n        _this.updateState(_this.sanitizeValues(splittedValue, _this.values, false, true, false));\n\n        _this.jumpToDay();\n\n        return true;\n      } else if (_this.isCaretAtYear(splittedValue, selectionStart)) {\n        _this.updateState(_this.sanitizeValues(splittedValue, _this.values, false, false, true));\n\n        _this.jumpToMonth();\n\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.jumpToDay = function () {\n      _this.values.selectionStart = 10;\n      _this.values.selectionEnd = 10;\n\n      _this.inputRef.current.setSelectionRange(_this.values.selectionStart, _this.values.selectionEnd);\n    };\n\n    _this.jumpToMonth = function () {\n      _this.values.selectionStart = 7;\n      _this.values.selectionEnd = 7;\n\n      _this.inputRef.current.setSelectionRange(_this.values.selectionStart, _this.values.selectionEnd);\n    };\n\n    _this.jumpToYear = function () {\n      _this.values.selectionStart = 4;\n      _this.values.selectionEnd = 4;\n\n      _this.inputRef.current.setSelectionRange(_this.values.selectionStart, _this.values.selectionEnd);\n    };\n\n    _this.handleKeyDown = function (event) {\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n      if (_this.props.disabled || _this.props.readOnly) {\n        event.preventDefault();\n      } else if (event.keyCode === 8) {\n        //backspace\n        event.preventDefault();\n\n        _this.updateState(_this.deleteValue(event.target, -1));\n      } else if (event.keyCode === 46) {\n        //delete\n        event.preventDefault();\n\n        _this.updateState(_this.deleteValue(event.target, 1));\n      } else if (event.keyCode >= 48 && event.keyCode <= 57) {\n        //digits\n        event.preventDefault(); // console.log('digit');\n\n        _this.updateState(_this.updateValue(event.target, (event.keyCode - 48).toString(), _this.props.numberFormat));\n      } else if (event.keyCode >= 96 && event.keyCode <= 105) {\n        //digits\n        event.preventDefault(); // console.log('digit');\n\n        _this.updateState(_this.updateValue(event.target, (event.keyCode - 96).toString(), _this.props.numberFormat));\n      } else if (event.key >= '۰' && event.key <= '۹') {\n        //digits\n        event.preventDefault(); // console.log('digit');\n\n        _this.updateState(_this.updateValue(event.target, event.key, _this.props.numberFormat));\n      } else if (event.key === '.' || event.key === '/' || event.key === '-' || event.key === '*' || event.key === '#' || event.keyCode === 188 || event.keyCode === 189 || event.keyCode === 190 || event.keyCode === 191) {\n        event.preventDefault();\n\n        if (event.ctrlKey || event.shiftKey || event.metaKey || event.key === '#') {\n          _this.jumpToPrevious();\n        } else {\n          _this.jumpToNext();\n        }\n      } else if (event.keyCode >= 35 && event.keyCode <= 40) {//arrows\n      } else if (event.keyCode === 9) {\n        //tab\n        if (Math.abs(_this.inputRef.current.selectionStart - _this.inputRef.current.selectionEnd) === _this.inputRef.current.value.length) {\n          return;\n        }\n\n        if (event.ctrlKey || event.shiftKey || event.metaKey) {\n          if (_this.jumpToPrevious()) event.preventDefault();\n        } else {\n          if (_this.jumpToNext()) event.preventDefault();\n        }\n      } else if (event.keyCode === 13) {\n        //return\n        _this.hideKeyboard();\n      } else if ((event.ctrlKey || event.metaKey) && (event.keyCode === 67 || event.keyCode === 86)) {//copy/paste\n      } else if ((event.ctrlKey || event.metaKey) && event.keyCode === 82) {//refresh key\n      } else if ((event.ctrlKey || event.metaKey) && event.keyCode === 73) {//inspector\n      } else if ((event.ctrlKey || event.metaKey) && event.keyCode === 65) {//select all\n      } else if ((event.ctrlKey || event.metaKey) && event.keyCode === 76) {//location focus\n      } else if (event.keyCode === 115) {\n        // F4\n        if (_this.props.onShowDialog) {\n          event.preventDefault();\n\n          _this.props.onShowDialog();\n        }\n      } else if (event.keyCode >= 112 && event.keyCode <= 123) {// All other F keys\n      } else if (event.keyCode === 229) {\n        //android bug workaround\n        //K1 : I guess that we have to save the caret position as the input will change it, we need it to know where we have to jump to in handleInput function\n        _this.values.selectionStart = _this.inputRef.current.selectionStart;\n        _this.values.selectionEnd = _this.inputRef.current.selectionEnd; //  this.rr.current.innerText = `setting ss to ${this.values.selectionStart}  ${this.values.selectionEnd}`;\n      } else {\n        // console.log('other');\n        // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n        //  this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n        event.preventDefault();\n      }\n    };\n\n    _this.hideKeyboard = function () {\n      _this.inputRef.current.blur();\n    };\n\n    _this.handlePaste = function (event) {\n      event.preventDefault();\n      if (_this.props.disabled || _this.props.readOnly) return;\n      var d = (event.clipboardData || window.clipboardData).getData('text').trim();\n\n      _this.stringArrived(d);\n    };\n\n    _this.handleInput = function (event) {\n      event.preventDefault();\n      if (_this.props.disabled || _this.props.readOnly) return;\n      if (_this.values.valueToShow === event.target.value) return;\n      var d = event.target.value;\n\n      _this.stringArrived(d);\n\n      if (_this.inputRef.current.value !== _this.values.valueToShow) {\n        _this.inputRef.current.value = _this.values.valueToShow;\n\n        _this.inputRef.current.setSelectionRange(_this.values.selectionStart, _this.values.selectionEnd);\n      }\n\n      if (hasStringACharToGoToNext(d)) {\n        _this.jumpToNext();\n      }\n    };\n\n    _this.stringArrived = function (d) {\n      d = mapToLatin(d);\n      var date = isValueValidDate(d, _this.props.gregorian);\n\n      if (!date) {\n        date = new Date(d);\n\n        if (date.toString() === 'Invalid Date') {\n          date = false;\n        }\n      }\n\n      if (!!date) {\n        var value;\n\n        if (_this.props.gregorian) {\n          value = formatGregorian(date);\n        } else {\n          var j = jalaali.toJalaali(date.getFullYear(), date.getMonth() + 1, date.getDate());\n          value = formatJalaali(j);\n        }\n\n        var valueIsValid = true;\n        var iso = date.toISOString();\n\n        var valueToShow = _this.mapValue(value, _this.props.numberFormat);\n\n        var newState = {\n          value: value,\n          valueToShow: valueToShow,\n          valueIsValid: valueIsValid,\n          iso: iso,\n          date: date,\n          selectionStart: undefined,\n          selectionEnd: undefined\n        };\n\n        _this.updateState(newState);\n      }\n    };\n\n    _this.mapValue = function (value, numberFormat) {\n      if (numberFormat === NUMBER_FORMAT_FARSI) {\n        var _mapped = mapToFarsi(value);\n\n        return _mapped;\n      } else if (numberFormat === NUMBER_FORMAT_LATIN) {\n        var _mapped2 = mapToLatin(value);\n\n        return _mapped2;\n      }\n\n      var mapped = mapToFarsi(value);\n      return mapped;\n    };\n\n    _this.updateState = function (newState, noFireOnChange) {\n      if (!newState) return;\n      _this.values = newState;\n\n      if (!_this.values.value) {\n        _this.values.iso = '';\n        _this.values.date = null;\n        _this.values.valueIsValid = false;\n      } else {\n        if (newState.date) {\n          _this.values.valueIsValid = true;\n          _this.values.date = newState.date;\n          _this.values.iso = newState.iso ? newState.iso : _this.values.date.toISOString();\n        } else {\n          var date = isValueValidDate(_this.values.value, _this.props.gregorian);\n          _this.values.valueIsValid = !!date;\n\n          if (_this.values.valueIsValid) {\n            _this.values.date = date;\n            _this.values.iso = _this.values.date.toISOString();\n          } else {\n            _this.values.date = null;\n            _this.values.iso = '';\n          }\n        }\n      } // let fireOnChangeInTheEnd = false;\n      //console.log('values on updateState', this.values)\n\n\n      if (_this.inputRef.current.value !== _this.values.valueToShow) {\n        // fireOnChangeInTheEnd = true;\n        _this.inputRef.current.value = _this.values.valueToShow;\n      }\n\n      if (_this.inputRef.current === document.activeElement) {\n        // console.log('has focus :D');\n        _this.inputRef.current.setSelectionRange(_this.values.selectionStart, _this.values.selectionEnd);\n      } else {} // console.log('has not focus :(');\n      // if(fireOnChangeInTheEnd){\n\n\n      if (!noFireOnChange) {\n        _this.fireOnChange();\n      } // }\n\n    };\n\n    _this.updateValue = function (element, enteredValue, numberFormat) {\n      var enteredValueMapped = _this.mapValue(enteredValue, numberFormat);\n\n      var valueToShow = element.value;\n      var selectionStart = element.selectionStart;\n      var selectionEnd = element.selectionEnd;\n\n      if (valueToShow === '') {\n        valueToShow = EMPTY_VALUE;\n        selectionStart = 10;\n        selectionEnd = 10;\n      }\n\n      valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n      selectionStart += enteredValueMapped.length;\n      selectionEnd = selectionStart;\n      var value = mapToLatin(valueToShow);\n\n      var values = _this.inspectValues({\n        value: value,\n        valueToShow: valueToShow,\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n      });\n\n      return values;\n    };\n\n    _this.isCaretAtDay = function (splittedValue, selectionStart) {\n      return splittedValue && selectionStart > splittedValue.seperator2;\n    };\n\n    _this.isCaretAtMonth = function (splittedValue, selectionStart) {\n      return splittedValue && selectionStart <= splittedValue.seperator2 && selectionStart > splittedValue.seperator1;\n    };\n\n    _this.isCaretAtYear = function (splittedValue, selectionStart) {\n      return splittedValue && selectionStart <= splittedValue.seperator1;\n    };\n\n    _this.sanitizeValues = function (splittedValue, values, sanitizeDay, sanitizeMonth, sanitizeYear) {\n      var value = values.value;\n\n      if (splittedValue === '') {\n        return null;\n      }\n\n      if (!splittedValue) {\n        return _this.resetValues();\n      }\n\n      var year = splittedValue.year,\n          month = splittedValue.month,\n          day = splittedValue.day;\n\n      if (sanitizeDay) {\n        if (day.length === 0) {\n          day = '  ';\n        } else if (day.length === 1) {\n          if (day === '0' || day === ' ') {\n            day = '  ';\n          } else {\n            day = '0' + day;\n          }\n        }\n      }\n\n      if (sanitizeMonth) {\n        if (month.length === 0) {\n          month = '  ';\n        } else if (month.length === 1) {\n          if (month === '0' || month === ' ') {\n            month = '  ';\n          } else {\n            month = '0' + month;\n          }\n        }\n      }\n\n      if (sanitizeYear) {\n        year = year.trim();\n        year = baseYear(_this.props.gregorian).substring(0, 4 - year.length) + year;\n      }\n\n      var newValue = \"\".concat(year).concat(DATE_SEPERATOR).concat(month).concat(DATE_SEPERATOR).concat(day);\n\n      if (value !== newValue) {\n        return _objectSpread({}, values, {\n          value: newValue,\n          valueToShow: _this.mapValue(newValue, _this.props.numberFormat)\n        });\n      }\n    };\n\n    _this.inspectValues = function (values) {\n      var value = values.value;\n      var splittedValue = splitDateValue(value);\n\n      if (!splittedValue) {\n        return _this.resetValues();\n      }\n\n      var year = splittedValue.year,\n          month = splittedValue.month,\n          day = splittedValue.day;\n      var newStartPosition = values.selectionStart;\n\n      if (_this.isCaretAtDay(splittedValue, values.selectionStart)) {\n        var inspected = inspectDay(day, values.selectionStart, splittedValue.seperator2, maxDayFor(year, month, _this.props.gregorian));\n        newStartPosition = inspected.newStartPosition;\n        day = inspected.newDay;\n      } else if (_this.isCaretAtMonth(splittedValue, values.selectionStart)) {\n        var _inspected = inspectMonth(month, values.selectionStart, splittedValue.seperator1);\n\n        newStartPosition = _inspected.newStartPosition;\n        month = _inspected.newMonth;\n      } else if (_this.isCaretAtYear(splittedValue, values.selectionStart)) {\n        var _inspected2 = inspectYear(year, values.selectionStart);\n\n        newStartPosition = _inspected2.newStartPosition;\n        year = _inspected2.newYear;\n      }\n\n      var newValue = \"\".concat(year).concat(DATE_SEPERATOR).concat(month).concat(DATE_SEPERATOR).concat(day);\n      return {\n        value: newValue,\n        valueToShow: _this.mapValue(newValue, _this.props.numberFormat),\n        selectionStart: newStartPosition,\n        selectionEnd: newStartPosition\n      };\n    };\n\n    _this.resetValues = function () {\n      var value = '';\n      return {\n        value: value,\n        valueToShow: _this.mapValue(value, _this.props.numberFormat),\n        selectionStart: 10,\n        selectionEnd: 10\n      };\n    };\n\n    _this.deleteValue = function (element, qty) {\n      var valueToShow = element.value;\n      var selectionStart = element.selectionStart;\n      var selectionEnd = element.selectionEnd;\n\n      if (selectionStart === selectionEnd) {\n        if (qty < 0) {\n          if (selectionStart === 0) return;\n          if (valueToShow.substring(selectionStart + qty, selectionStart) === DATE_SEPERATOR) return;\n          valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n          selectionStart += qty;\n        } else {\n          if (selectionEnd === valueToShow.length) return;\n          if (valueToShow.substring(selectionStart, selectionStart + qty) === DATE_SEPERATOR) return;\n          valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd + qty);\n        }\n      } else {\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd);\n      }\n\n      selectionEnd = selectionStart;\n      var value = mapToLatin(valueToShow);\n\n      var values = _this.inspectValues({\n        value: value,\n        valueToShow: valueToShow,\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n      });\n\n      return values;\n    };\n\n    _this.fireOnChange = function () {\n      if (_this.props.onChange) {\n        var value = _this.values.valueIsValid ? _this.values.value : '';\n\n        if (_this.previousValue !== value) {\n          _this.previousValue = value;\n          var target = !_this.values.valueIsValid ? {\n            name: _this.props.name,\n            formatted: '',\n            value: '',\n            date: null\n          } : {\n            name: _this.props.name,\n            value: _this.values.iso,\n            formatted: _this.values.value,\n            date: _this.values.date\n          };\n\n          _this.props.onChange({\n            target: target\n          });\n        }\n      }\n    };\n\n    _this.emptyValue = _this.emptyValue.bind(_assertThisInitialized(_this));\n    var ref;\n\n    if (_props.inputRef && typeof _props.inputRef === 'function') {\n      ref = _props.inputRef();\n    } else if (_props.inputRef && typeof _props.inputRef === 'object') {\n      ref = _props.inputRef;\n    }\n\n    _this.inputRef = ref ? ref : React.createRef(); // this.rr = React.createRef();\n\n    _this.values = _this.readValuesFromProps(_props);\n    _this.previousValue = _this.values.value;\n    return _this;\n  }\n\n  _createClass(DateInput, [{\n    key: \"emptyValue\",\n    value: function emptyValue() {\n      this.updateState(this.resetValues());\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.value !== this.props.value && nextProps.value !== this.values.iso || nextProps.gregorian !== this.props.gregorian || nextProps.numberFormat !== this.props.numberFormat) {\n        this.updateState(this.readValuesFromProps(nextProps), true);\n      }\n\n      if (!shallowEqualObjects(nextProps.style, this.props.style)) {\n        return true;\n      }\n\n      if (nextProps.className !== this.props.className) {\n        this.inputRef.current.className = nextProps.className;\n      }\n\n      if (nextProps.disabled !== this.props.disabled) {\n        this.inputRef.current.disabled = nextProps.disabled;\n      }\n\n      if (nextProps.readOnly !== this.props.readOnly) {\n        this.inputRef.current.readOnly = nextProps.readOnly;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          gregorian = _this$props.gregorian,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onInput = _this$props.onInput,\n          onPaste = _this$props.onPaste,\n          onKeyDown = _this$props.onKeyDown,\n          onShowDialog = _this$props.onShowDialog,\n          pattern = _this$props.pattern,\n          inputMode = _this$props.inputMode,\n          defaultValue = _this$props.defaultValue,\n          type = _this$props.type,\n          inputRef = _this$props.inputRef,\n          numberFormat = _this$props.numberFormat,\n          rest = _objectWithoutProperties(_this$props, [\"gregorian\", \"value\", \"onChange\", \"onFocus\", \"onBlur\", \"onInput\", \"onPaste\", \"onKeyDown\", \"onShowDialog\", \"pattern\", \"inputMode\", \"defaultValue\", \"type\", \"inputRef\", \"numberFormat\"]);\n\n      var valueToShow = this.values.valueToShow; // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n      // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n      return React.createElement(\"input\", Object.assign({\n        ref: this.inputRef,\n        type: \"tel\" // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        ,\n        dir: \"ltr\" // pattern={localPattern}\n        ,\n        defaultValue: valueToShow,\n        onKeyDown: this.handleKeyDown,\n        onPaste: this.handlePaste,\n        onInput: this.handleInput,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur\n      }, rest)); //<p ref={this.rr} type={\"text\"}>empty</p></div>\n    }\n  }]);\n\n  return DateInput;\n}(Component);\n\nexport default DateInput;","map":null,"metadata":{},"sourceType":"module"}