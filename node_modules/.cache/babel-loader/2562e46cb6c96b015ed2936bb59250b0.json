{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/presentational/chart/MapAdvanced.jsx\";\nimport React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Axios from \"axios\";\n\nrequire(\"highcharts/modules/map\")(Highcharts);\n\nconst dataTest = [{\n  \"city\": \"tehran\",\n  \"lat\": 32.37,\n  \"lon\": 51.300629,\n  \"z\": 205764\n}, {\n  \"city\": \"emarat\",\n  \"lat\": 33.39,\n  \"lon\": 52.300629,\n  \"z\": 205764\n}, {\n  \"city\": \"esfahan\",\n  \"lat\": 33.59,\n  \"lon\": 52.300629,\n  \"z\": 205764\n}];\n\nclass MapAdvanced extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapData: null\n    };\n    this.options = {\n      title: {\n        text: \"Widget click by location\",\n        style: {\n          color: \"#fff\"\n        }\n      },\n      chart: {\n        backgroundColor: \"#fff\",\n        // type: \"map\",\n        map: 'countries/gb/gb-all',\n        map: null\n      },\n      mapNavigation: {\n        enabled: true,\n        enableButtons: false\n      },\n      credits: {\n        enabled: false\n      },\n      tooltip: {\n        pointFormatter: function () {\n          return this.name + this.city;\n        }\n      },\n      legend: {\n        enabled: true,\n        align: \"right\",\n        verticalAlign: \"top\",\n        x: -100,\n        y: 70,\n        floating: true,\n        layout: \"vertical\",\n        valueDecimals: 0,\n        backgroundColor: Highcharts.defaultOptions && Highcharts.defaultOptions.legend && Highcharts.defaultOptions.legend.backgroundColor || \"rgba(0, 255, 255, 0)\"\n      },\n      series: [{\n        name: 'Basemap',\n        mapData: Highcharts.maps['countries/ir/ir-all'],\n        borderColor: 'black',\n        // color: 'red',\n        showInLegend: false\n      }, {\n        name: 'Separators',\n        type: 'mapline',\n        data: Highcharts.maps['countries/ir/ir-all'],\n        enableMouseTracking: false,\n        showInLegend: false\n      }, {\n        type: 'mapbubble',\n        dataLabels: {\n          enabled: true,\n          format: '{point.city}'\n        },\n        // name: 'Cities',\n        data: dataTest,\n        maxSize: '12%',\n        color: \"rgba(124,181,236,0.5)\"\n      }]\n    };\n    Axios.get(\"https://code.highcharts.com/mapdata/countries/ir/ir-all.geo.json\").then(r => {\n      this.setState({\n        mapData: r.data\n      }, () => {\n        this.options.series[0].data = []; //make sure data is empty before  fill\n\n        this.options[\"chart\"][\"map\"] = this.state.mapData; // set the map data of the graph (using the world graph)\n\n        for (let i in dataTest) {\n          // let mapInfo = this.state.mapData[\"features\"][i];\n          // if (dataTest[\"abbrev\"]) {\n          var abbrev = dataTest[\"city\"]; // var name = mapInfo[\"properties\"][\"name\"];\n\n          var value = i % 2 + 1;\n          var type = value === 1 ? \"widget name one\" : \"widget name two\"; // var row = mapInfo.id;\n          // var id = mapInfo.id;\n          // let index1 = dataTest.findIndex((item) => { return item.id == this.id })\n          // let index = Math.abs(index1)\n          // let count = dataTest[index].count ? dataTest[index].count : \"op\"\n\n          this.options.series[0].data.push({\n            city: abbrev,\n            value: 1,\n            // name: name,\n            // \"postal-code\": postalCode,\n            // row: row,\n            type: 1 // id: id,\n            // count: count\n\n          }); // }\n        } // updating the map options\n\n\n        this.setState({\n          mapOptions: this.options\n        });\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.state.mapOptions ? React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      constructorType: \"mapChart\",\n      options: this.state.mapOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }) : \"\");\n  }\n\n}\n\nexport default MapAdvanced;","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/presentational/chart/MapAdvanced.jsx"],"names":["React","Highcharts","HighchartsReact","Axios","require","dataTest","MapAdvanced","Component","constructor","props","state","mapData","options","title","text","style","color","chart","backgroundColor","map","mapNavigation","enabled","enableButtons","credits","tooltip","pointFormatter","name","city","legend","align","verticalAlign","x","y","floating","layout","valueDecimals","defaultOptions","series","maps","borderColor","showInLegend","type","data","enableMouseTracking","dataLabels","format","maxSize","get","then","r","setState","i","abbrev","value","push","mapOptions","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Axios from \"axios\";\n\nrequire(\"highcharts/modules/map\")(Highcharts);\n\nconst dataTest = [{\n  \"city\": \"tehran\",\n  \"lat\": 32.37,\n  \"lon\": 51.300629,\n  \"z\": 205764,\n},\n{\n  \"city\": \"emarat\",\n  \"lat\": 33.39,\n  \"lon\": 52.300629,\n  \"z\": 205764,\n},\n{\n  \"city\": \"esfahan\",\n  \"lat\": 33.59,\n  \"lon\": 52.300629,\n  \"z\": 205764\n},\n]\n\nclass MapAdvanced extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapData: null\n    };\n    this.options =\n    {\n      title: {\n        text: \"Widget click by location\",\n        style: {\n          color: \"#fff\"\n        }\n      },\n      chart: {\n        backgroundColor: \"#fff\",\n        // type: \"map\",\n        map: 'countries/gb/gb-all',\n        map: null\n      },\n      mapNavigation: {\n        enabled: true,\n        enableButtons: false\n      },\n      credits: {\n        enabled: false\n      },\n      \n      tooltip: {\n        pointFormatter: function () {\n          return (this.name + this.city);\n        }\n      },\n      legend: {\n        enabled: true,\n        align: \"right\",\n        verticalAlign: \"top\",\n        x: -100,\n        y: 70,\n        floating: true,\n        layout: \"vertical\",\n        valueDecimals: 0,\n        backgroundColor: (Highcharts.defaultOptions &&\n          Highcharts.defaultOptions.legend &&\n          Highcharts.defaultOptions.legend.backgroundColor) ||\n          \"rgba(0, 255, 255, 0)\"\n      },\n      series: [{\n        name: 'Basemap',\n        mapData: Highcharts.maps['countries/ir/ir-all'],\n        borderColor: 'black',\n        // color: 'red',\n        showInLegend: false\n      }, {\n        name: 'Separators',\n        type: 'mapline',\n        data: Highcharts.maps['countries/ir/ir-all'],\n        enableMouseTracking: false,\n        showInLegend: false\n      }, {\n        type: 'mapbubble',\n        dataLabels: {\n          enabled: true,\n          format: '{point.city}'\n        },\n        // name: 'Cities',\n        data: dataTest,\n        maxSize: '12%',\n        color: \"rgba(124,181,236,0.5)\"\n\n      }]\n\n    };\n\n    Axios.get(\"https://code.highcharts.com/mapdata/countries/ir/ir-all.geo.json\").then(r => {\n      this.setState({ mapData: r.data }, () => {\n        this.options.series[0].data = []; //make sure data is empty before  fill\n        this.options[\"chart\"][\"map\"] = this.state.mapData; // set the map data of the graph (using the world graph)\n\n        for (let i in dataTest) {\n          // let mapInfo = this.state.mapData[\"features\"][i];\n          // if (dataTest[\"abbrev\"]) {\n          var abbrev = dataTest[\"city\"];\n          // var name = mapInfo[\"properties\"][\"name\"];\n          var value = (i % 2) + 1;\n          var type = value === 1 ? \"widget name one\" : \"widget name two\";\n          // var row = mapInfo.id;\n          // var id = mapInfo.id;\n          // let index1 = dataTest.findIndex((item) => { return item.id == this.id })\n          // let index = Math.abs(index1)\n          // let count = dataTest[index].count ? dataTest[index].count : \"op\"\n          this.options.series[0].data.push({\n            city: abbrev,\n            value: 1,\n            // name: name,\n            // \"postal-code\": postalCode,\n            // row: row,\n            type: 1,\n            // id: id,\n            // count: count\n          });\n          // }\n        }\n        // updating the map options\n        this.setState({ mapOptions: this.options });\n      });\n    });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.mapOptions ? (\n          <HighchartsReact\n            highcharts={Highcharts}\n            constructorType={\"mapChart\"}\n            options={this.state.mapOptions}\n          />\n        ) : (\n            \"\"\n          )}\n      </>\n    );\n  }\n}\n\nexport default MapAdvanced;\n"]},"metadata":{},"sourceType":"module"}