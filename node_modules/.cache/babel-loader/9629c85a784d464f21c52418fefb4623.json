{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../store/Action';\nimport { useDispatch } from 'react-redux';\nimport moduleName from '../container/Test1';\nimport { bindActionCreators } from 'redux';\nimport { store } from '../../index';\nimport * as ErrorCode from '../../config/ErrorCode';\n\nconst handleresponse = (res, type) => {};\n\nconst ErrorHandeling = (res, type = \"\") => {\n  switch (type) {\n    case \"shipments\":\n      {\n        const response = res.data;\n\n        if (response.data) {\n          if (response.data.elements) {\n            return response.data;\n          } else {\n            store.dispatch(actionCreator.TOGGLE_MESSAGE({\n              show: true,\n              content: ErrorCode.API__INVALID_DATA_FORMAT\n            }));\n          }\n        } else {\n          store.dispatch(actionCreator.TOGGLE_MESSAGE({\n            show: true,\n            content: ErrorCode.API__INVALID_DATA_FORMAT\n          }));\n        }\n      }\n      break;\n\n    case \"Cod\":\n      {\n        const response = res.data;\n        let dataCOD = null;\n        let msg = null;\n\n        if (response.data) {\n          return response.data;\n        } else {\n          store.dispatch(actionCreator.TOGGLE_MESSAGE({\n            show: true,\n            content: ErrorCode.API__INVALID_DATA_FORMAT\n          }));\n        }\n      }\n      break;\n\n    case \"shipmentTracking\":\n      {\n        const response = res.data;\n\n        if (response.data) {\n          return response.data;\n        } else {\n          store.dispatch(actionCreator.TOGGLE_MESSAGE({\n            show: true,\n            content: ErrorCode.API__INVALID_DATA_FORMAT\n          }));\n        }\n      }\n      break;\n\n    default:\n      return res.data;\n      break;\n  }\n};\n\nexport default ErrorHandeling;","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/container/ErrorHandeling.js"],"names":["React","connect","actionCreator","useDispatch","moduleName","bindActionCreators","store","ErrorCode","handleresponse","res","type","ErrorHandeling","response","data","elements","dispatch","TOGGLE_MESSAGE","show","content","API__INVALID_DATA_FORMAT","dataCOD","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAO,KAAKC,SAAZ,MAA2B,wBAA3B;;AAEA,MAAMC,cAAc,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe,CAAE,CAAxC;;AAGA,MAAMC,cAAc,GAAG,CAACF,GAAD,EAAMC,IAAI,GAAG,EAAb,KAAoB;AAEvC,UAAQA,IAAR;AACI,SAAK,WAAL;AACI;AACI,cAAME,QAAQ,GAAGH,GAAG,CAACI,IAArB;;AACA,YAAID,QAAQ,CAACC,IAAb,EAAmB;AAEf,cAAID,QAAQ,CAACC,IAAT,CAAcC,QAAlB,EAA4B;AAExB,mBAAQF,QAAQ,CAACC,IAAjB;AAEH,WAJD,MAIO;AACHP,YAAAA,KAAK,CAACS,QAAN,CAAeb,aAAa,CAACc,cAAd,CAA6B;AAAEC,cAAAA,IAAI,EAAE,IAAR;AAAcC,cAAAA,OAAO,EAAEX,SAAS,CAACY;AAAjC,aAA7B,CAAf;AACH;AACJ,SATD,MASO;AACHb,UAAAA,KAAK,CAACS,QAAN,CAAeb,aAAa,CAACc,cAAd,CAA6B;AAAEC,YAAAA,IAAI,EAAE,IAAR;AAAcC,YAAAA,OAAO,EAAEX,SAAS,CAACY;AAAjC,WAA7B,CAAf;AACH;AACJ;AACD;;AAEJ,SAAK,KAAL;AAAY;AACR,cAAMP,QAAQ,GAAGH,GAAG,CAACI,IAArB;AACA,YAAIO,OAAO,GAAG,IAAd;AACA,YAAIC,GAAG,GAAG,IAAV;;AACA,YAAIT,QAAQ,CAACC,IAAb,EAAmB;AACf,iBAAOD,QAAQ,CAACC,IAAhB;AACH,SAFD,MAEO;AACHP,UAAAA,KAAK,CAACS,QAAN,CAAeb,aAAa,CAACc,cAAd,CAA6B;AAAEC,YAAAA,IAAI,EAAE,IAAR;AAAcC,YAAAA,OAAO,EAAEX,SAAS,CAACY;AAAjC,WAA7B,CAAf;AACH;AACJ;AACG;;AAEJ,SAAK,kBAAL;AAAyB;AACrB,cAAMP,QAAQ,GAAGH,GAAG,CAACI,IAArB;;AACA,YAAID,QAAQ,CAACC,IAAb,EAAmB;AACf,iBAAOD,QAAQ,CAACC,IAAhB;AACH,SAFD,MAEO;AACHP,UAAAA,KAAK,CAACS,QAAN,CAAeb,aAAa,CAACc,cAAd,CAA6B;AAAEC,YAAAA,IAAI,EAAE,IAAR;AAAcC,YAAAA,OAAO,EAAEX,SAAS,CAACY;AAAjC,WAA7B,CAAf;AACH;AACJ;AACG;;AAEJ;AAEI,aAAQV,GAAG,CAACI,IAAZ;AACA;AA5CR;AA+CH,CAjDD;;AAoDA,eAAeF,cAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../store/Action';\nimport { useDispatch } from 'react-redux';\nimport moduleName from '../container/Test1'\nimport { bindActionCreators } from 'redux';\nimport { store } from '../../index';\nimport * as ErrorCode from '../../config/ErrorCode';\n\nconst handleresponse = (res, type) => {}\n    \n\nconst ErrorHandeling = (res, type = \"\") => {\n\n    switch (type) {\n        case \"shipments\":\n            {\n                const response = res.data\n                if (response.data) {\n\n                    if (response.data.elements) {\n\n                        return (response.data)\n\n                    } else {\n                        store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__INVALID_DATA_FORMAT }))\n                    }\n                } else {\n                    store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__INVALID_DATA_FORMAT }))\n                }\n            }\n            break;\n\n        case \"Cod\": {\n            const response = res.data\n            let dataCOD = null\n            let msg = null\n            if (response.data) {\n                return response.data\n            } else {\n                store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__INVALID_DATA_FORMAT }))\n            }\n        }\n            break;\n\n        case \"shipmentTracking\": {\n            const response = res.data\n            if (response.data) {\n                return response.data\n            } else {\n                store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__INVALID_DATA_FORMAT }))\n            }\n        }\n            break;\n\n        default:\n\n            return (res.data)\n            break;\n    }\n    \n}\n\n\nexport default ErrorHandeling\n"]},"metadata":{},"sourceType":"module"}