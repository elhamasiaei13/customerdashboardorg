{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/container/Shipper.js\";\nimport React, { Component } from 'react';\nimport Table from '../presentational/table/Table';\nimport Pagination from '../presentational/table/Pagination';\nimport Card from '../presentational/card/Card';\nimport SearchForm from '../container/SearchForm';\nimport Col from '../presentational/Col';\nimport * as actionCreator from '../../store/Action';\nimport { connect } from 'react-redux';\nimport ErrorHandeling from './ErrorHandeling';\nimport { withRouter, Route, Redirect } from 'react-router-dom';\nimport Api from '../../config/Api';\nimport ErrorMessage from '../presentational/ErrorMessage';\nimport { exportDefaultSpecifier } from '@babel/types';\nimport Preloader from '../presentational/Preloader';\nimport * as ErrorCode from '../../config/ErrorCode';\nimport Row from '../presentational/Row';\nimport FormDatePicker from '../presentational/input/FormDatePicker';\nimport ViewHichestanDatePicker from '../presentational/input/ViewHichestanDatePicker';\nimport FormData from '../presentational/input/FormData';\nimport { FormattedMessage } from 'react-intl';\nimport moment from 'moment-jalaali';\nimport show from './ShowSearchParam';\n\nclass Shipper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchValue = searchParam => {\n      this.props.SET_SearchParam(searchParam);\n\n      if (searchParam != null) {\n        const {\n          activePage,\n          itemsCountPerPage\n        } = this.state; // this.getData(activePage, itemsCountPerPage, searchParam)\n      }\n    };\n\n    this.state = {\n      total: 0,\n      data: [],\n      datatest: [{\n        \"ship\": \"1\"\n      }],\n      message: null,\n      size: 10,\n      loading: false,\n      activePage: 1,\n      itemsCountPerPage: 10,\n      sortOrder: '',\n      sortField: '',\n      showSearchForm: true\n    };\n    this.changeData = this.changeData.bind(this);\n    this.searchValue = this.searchValue.bind(this);\n    this.changeSize = this.changeSize.bind(this);\n    this.sortTable = this.sortTable.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.TOGGLE_MESSAGE({\n      show: false,\n      content: \"\"\n    });\n    window.scrollTo(0, 0);\n    this.getData();\n  }\n\n  changeData(page = this.state.activePage) {\n    this.state.activePage = page;\n    this.setState({});\n    this.getData(page, this.state.itemsCountPerPage, this.props.searchParam);\n  }\n\n  changeSize(size) {\n    this.setState({\n      itemsCountPerPage: size\n    });\n    this.getData(this.state.activePage, size, this.props.searchParam);\n  }\n\n  sortTable(field, order) {\n    console.log(\"order\", order, \"field\", field);\n    this.setState({\n      sortOrder: order,\n      sortField: field,\n      activePage: 1\n    });\n    this.getData();\n  }\n\n  getData(page = 1, size = this.state.itemsCountPerPage, searchParam = this.props.searchParam) {\n    this.setState({\n      loading: true\n    });\n    let newsCOD = null;\n    let newcurrentStates = [];\n    let newsconsigneeCity = [];\n    let newpaymentMethods = [];\n    let search = \"\";\n\n    if (searchParam != null) {\n      Object.keys(searchParam).forEach(function (key, index) {\n        if (searchParam[key] != undefined) {\n          if (key == \"currentStates\") {\n            searchParam[key].map(item => {\n              newcurrentStates.push(item.value);\n            });\n            search = search + \"&\" + key + \"=\" + newcurrentStates;\n          } else if (key == \"consigneeCities\") {\n            searchParam[key].map(item => {\n              newsconsigneeCity.push(item.value.split(\"--\", 1));\n            });\n            search = search + \"&\" + \"consigneeCityCodes\" + \"=\" + newsconsigneeCity;\n          } else if (key == \"shipperCities\") {\n            searchParam[key].map(item => {\n              newsconsigneeCity.push(item.value.split(\"--\", 1));\n            });\n            search = search + \"&\" + \"shipperCityCodes\" + \"=\" + newsconsigneeCity;\n          } else if (key == \"paymentMethods\") {\n            searchParam[key].map(item => {\n              newpaymentMethods.push(item.value);\n            });\n            search = search + \"&\" + key + \"=\" + newpaymentMethods;\n          } else if (key == \"COD\") {\n            search = search + \"&\" + \"hasCod\" + \"=\" + searchParam[key].value;\n          } else if (key == \"deliveryDateFrom\" || key == \"issuingDateTo\" || key == \"issuingDateFrom\" || key == \"deliveryDateTo\") {\n            // search  = search + \"&\" + key + \"=\" + searchParam[key].format('jYYYY-jMM-jDD HH:mm:00')\n            if (searchParam[key] !== undefined) {\n              const mergeDateTime = (date, time) => {\n                if (time != undefined) {\n                  var time = time.split(':');\n                  date.set({\n                    hours: time[0],\n                    minutes: time[1]\n                  });\n                  return date;\n                } else {\n                  time = \"00:00\";\n                  var time = time.split(':');\n                  date.set({\n                    hours: time[0],\n                    minutes: time[1]\n                  });\n                  return date;\n                }\n              };\n\n              switch (key) {\n                case \"deliveryDateFrom\":\n                  var date = mergeDateTime(moment(searchParam[key]), searchParam.deliveryTimeFrom);\n                  search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm');\n                  break;\n\n                case \"deliveryDateTo\":\n                  var date = mergeDateTime(moment(searchParam[key]), searchParam.deliveryTimeTo);\n                  search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm');\n                  break;\n\n                case \"issuingDateTo\":\n                  var date = mergeDateTime(moment(searchParam[key]), searchParam.issuingTimeTo);\n                  search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm');\n                  break;\n\n                case \"issuingDateFrom\":\n                  var date = mergeDateTime(moment(searchParam[key]), searchParam.issuingTimeFrom);\n                  search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm');\n                  break;\n\n                default:\n                  break;\n              }\n            }\n          } else if (key == \"waybillNumbers\") {\n            search = search + \"&\" + key + \"=\" + searchParam[key];\n          } else if (key == \"allNumbers\") {\n            search = search + \"&\" + key + \"=\" + searchParam[key];\n          } else if (key == \"partNumbers\") {\n            search = search + \"&\" + key + \"=\" + searchParam[key];\n          } else if (key == \"references\") {\n            search = search + \"&\" + key + \"=\" + searchParam[key];\n          }\n        }\n      });\n    }\n\n    this.props.SET_READYSEARCHPARAM(search);\n    const {\n      userName,\n      password\n    } = this.props;\n    return Api.getShipments(\"/shipments?page=\" + page + \"&size=\" + size + search, {\n      userName: userName,\n      password: password\n    }).then(response => {\n      if (response != undefined) {\n        this.state.data = response.elements ? response.elements : [];\n        this.state.total = response.total;\n      }\n\n      this.setState({\n        loading: false\n      });\n    }).finally(() => {// this.setState({ loading: false})\n    });\n  }\n\n  render() {\n    const {\n      data,\n      total,\n      message,\n      loading,\n      itemsCountPerPage,\n      activePage,\n      showSearchForm\n    } = this.state;\n    const {\n      searchParam,\n      userName,\n      password\n    } = this.props;\n    return React.createElement(Col, {\n      md: 12,\n      key: Math.random().toString(36).substr(2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: Math.random().toString(36).substr(2),\n      cardTitle: React.createElement(\"span\", {\n        onClick: () => {\n          this.setState({\n            showSearchForm: !showSearchForm\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"\\u062C\\u0633\\u062A\\u062C\\u0648 \\xA0 \", React.createElement(\"i\", {\n        className: showSearchForm ? \"ti-angle-down\" : \"ti-angle-up\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, showSearchForm ? React.createElement(SearchForm, {\n      searchParam: searchParam,\n      searchValue: this.searchValue,\n      userName: userName,\n      password: password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }) : React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, show.ShowSearchParam(this.props.searchParam))), message ? React.createElement(ErrorMessage, {\n      error: message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }) : React.createElement(Card, {\n      key: Math.random().toString(36).substr(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, loading ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, null, React.createElement(Pagination, {\n      total: total,\n      changeData: this.changeData,\n      activePage: activePage,\n      itemsCountPerPage: itemsCountPerPage,\n      changeSize: this.changeSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      key: Math.random().toString(36).substr(2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Table, {\n      classTable: \" table-striped table-hover\",\n      classHeader: \"bg-inverse text-white text-center\",\n      classBody: \" directionLTR\",\n      theader: ['#', \"waybillNumber\", \"issuingDate\", \"deliveryDate\",, \"shipper\", \"shipperCity\", \"consignee\", \"consigneeCity\", \"paymentMethod\", \"chargeParty\", \"currentState\",, \"activity\"],\n      tbody: data.length > 0 ? data : [] // tbody = {this.state.datatest}\n      ,\n      defaultKey: \"shipment\",\n      sortTable: this.sortTable,\n      sort: true,\n      activePage: activePage,\n      indexVariable: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }))), React.createElement(Pagination, {\n      total: total,\n      changeData: this.changeData,\n      activePage: activePage,\n      itemsCountPerPage: itemsCountPerPage,\n      changeSize: this.changeSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = store => {\n  return {\n    userName: store.Reducer.userName,\n    password: store.Reducer.password,\n    searchParam: store.Reducer.searchParam\n  };\n};\n\nconst mapDispachToProps = dispach => {\n  return {\n    SET_AUTHENTICATE: value => {\n      dispach(actionCreator.SET_AUTHENTICATE(value));\n    },\n    SET_SearchParam: value => {\n      dispach(actionCreator.SET_SEARCHPARAM(value));\n    },\n    SET_READYSEARCHPARAM: value => {\n      dispach(actionCreator.SET_READYSEARCHPARAM(value));\n    },\n    TOGGLE_MESSAGE: value => {\n      dispach(actionCreator.TOGGLE_MESSAGE(value));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(Shipper));","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/container/Shipper.js"],"names":["React","Component","Table","Pagination","Card","SearchForm","Col","actionCreator","connect","ErrorHandeling","withRouter","Route","Redirect","Api","ErrorMessage","exportDefaultSpecifier","Preloader","ErrorCode","Row","FormDatePicker","ViewHichestanDatePicker","FormData","FormattedMessage","moment","show","Shipper","constructor","props","searchValue","searchParam","SET_SearchParam","activePage","itemsCountPerPage","state","total","data","datatest","message","size","loading","sortOrder","sortField","showSearchForm","changeData","bind","changeSize","sortTable","componentDidMount","TOGGLE_MESSAGE","content","window","scrollTo","getData","page","setState","field","order","console","log","newsCOD","newcurrentStates","newsconsigneeCity","newpaymentMethods","search","Object","keys","forEach","key","index","undefined","map","item","push","value","split","mergeDateTime","date","time","set","hours","minutes","deliveryTimeFrom","format","deliveryTimeTo","issuingTimeTo","issuingTimeFrom","SET_READYSEARCHPARAM","userName","password","getShipments","then","response","elements","finally","render","Math","random","toString","substr","ShowSearchParam","length","mapStateToProps","store","Reducer","mapDispachToProps","dispach","SET_AUTHENTICATE","SET_SEARCHPARAM"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Table from '../presentational/table/Table';\nimport Pagination from '../presentational/table/Pagination';\nimport Card from '../presentational/card/Card';\nimport SearchForm from '../container/SearchForm';\nimport Col from '../presentational/Col';\nimport * as actionCreator from '../../store/Action'\nimport { connect } from 'react-redux';\nimport ErrorHandeling from './ErrorHandeling';\nimport { withRouter, Route, Redirect } from 'react-router-dom';\nimport Api from '../../config/Api';\nimport ErrorMessage from '../presentational/ErrorMessage'\nimport { exportDefaultSpecifier } from '@babel/types';\nimport Preloader from '../presentational/Preloader';\nimport * as ErrorCode from '../../config/ErrorCode';\nimport Row from '../presentational/Row';\nimport FormDatePicker from '../presentational/input/FormDatePicker';\nimport ViewHichestanDatePicker from '../presentational/input/ViewHichestanDatePicker';\nimport FormData from '../presentational/input/FormData';\nimport { FormattedMessage } from 'react-intl'\nimport moment from 'moment-jalaali';\nimport show from './ShowSearchParam';\nclass Shipper extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            total: 0,\n            data: [],\n            datatest: [{ \"ship\": \"1\" }],\n            message: null,\n            size: 10,\n            loading: false,\n            activePage: 1,\n            itemsCountPerPage: 10,\n            sortOrder: '',\n            sortField: '',\n            showSearchForm: true,\n        }\n        this.changeData = this.changeData.bind(this)\n        this.searchValue = this.searchValue.bind(this)\n        this.changeSize = this.changeSize.bind(this)\n        this.sortTable = this.sortTable.bind(this)\n    }\n\n\n\n    componentDidMount() {\n        this.props.TOGGLE_MESSAGE({ show: false, content: \"\" })\n        window.scrollTo(0, 0);\n        this.getData()\n    }\n\n\n    searchValue = (searchParam) => {\n        this.props.SET_SearchParam(searchParam)\n        if (searchParam != null) {\n            const { activePage, itemsCountPerPage } = this.state\n            // this.getData(activePage, itemsCountPerPage, searchParam)\n        }\n    }\n\n\n    changeData(page = this.state.activePage) {\n        this.state.activePage = page\n        this.setState({})\n        this.getData(page, this.state.itemsCountPerPage, this.props.searchParam)\n    }\n\n\n    changeSize(size) {\n        this.setState({ itemsCountPerPage: size })\n        this.getData(this.state.activePage, size, this.props.searchParam)\n    }\n\n    sortTable(field, order) {\n        console.log(\"order\", order, \"field\", field);\n        this.setState({\n            sortOrder: order,\n            sortField: field,\n            activePage: 1\n        })\n        this.getData()\n    }\n\n\n    getData(page = 1, size = this.state.itemsCountPerPage, searchParam = this.props.searchParam) {\n        this.setState({ loading: true })\n        let newsCOD = null\n        let newcurrentStates = []\n        let newsconsigneeCity = []\n        let newpaymentMethods = []\n        let search = \"\"\n        if (searchParam != null) {\n            Object.keys(searchParam).forEach(function (key, index) {\n                if (searchParam[key] != undefined) {\n                    if (key == \"currentStates\") {\n                        searchParam[key].map(item => {\n                            newcurrentStates.push(item.value)\n                        })\n                        search = search + \"&\" + key + \"=\" + newcurrentStates\n                    } else if (key == \"consigneeCities\") {\n                        searchParam[key].map(item => {\n                            newsconsigneeCity.push(item.value.split(\"--\", 1))\n                        })\n                        search = search + \"&\" + \"consigneeCityCodes\" + \"=\" + newsconsigneeCity\n                    } else if (key == \"shipperCities\") {\n                        searchParam[key].map(item => {\n                            newsconsigneeCity.push(item.value.split(\"--\", 1))\n                        })\n                        search = search + \"&\" + \"shipperCityCodes\" + \"=\" + newsconsigneeCity\n                    } else if (key == \"paymentMethods\") {\n                        searchParam[key].map(item => {\n                            newpaymentMethods.push(item.value)\n                        })\n                        search = search + \"&\" + key + \"=\" + newpaymentMethods\n                    } else if (key == \"COD\") {\n                        search = search + \"&\" + \"hasCod\" + \"=\" + searchParam[key].value\n                    } else if (key == \"deliveryDateFrom\" || key == \"issuingDateTo\" || key == \"issuingDateFrom\" || key == \"deliveryDateTo\") {\n                        // search  = search + \"&\" + key + \"=\" + searchParam[key].format('jYYYY-jMM-jDD HH:mm:00')\n                        if (searchParam[key] !== undefined) {\n                            const mergeDateTime = (date, time) => {\n                                if (time != undefined) {\n                                    var time = time.split(':');\n                                    date.set({\n                                        hours: time[0],\n                                        minutes: time[1]\n                                    })\n                                    return (date)\n                                }\n                                else {\n                                    time = \"00:00\"\n                                    var time = time.split(':');\n                                    date.set({\n                                        hours: time[0],\n                                        minutes: time[1]\n                                    })\n                                    return (date)\n                                }\n                            }\n\n                            switch (key) {\n\n                                case \"deliveryDateFrom\":\n                                    var date = mergeDateTime(moment(searchParam[key]), searchParam.deliveryTimeFrom)\n                                    search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm')\n                                    break;\n\n                                case \"deliveryDateTo\":\n                                    var date = mergeDateTime(moment(searchParam[key]), searchParam.deliveryTimeTo)\n                                    search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm')\n                                    break;\n\n                                case \"issuingDateTo\":\n                                    var date = mergeDateTime(moment(searchParam[key]), searchParam.issuingTimeTo)\n                                    search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm')\n                                    break;\n\n                                case \"issuingDateFrom\":\n                                    var date = mergeDateTime(moment(searchParam[key]), searchParam.issuingTimeFrom)\n                                    search = search + \"&\" + key + \"=\" + moment(date).format('jYYYY-jMM-jDD HH:mm')\n                                    break;\n\n                                default:\n                                    break;\n                            }\n                        }\n                    } else if (key == \"waybillNumbers\") {\n                        search = search + \"&\" + key + \"=\" + searchParam[key]\n                    } else if (key == \"allNumbers\") {\n                        search = search + \"&\" + key + \"=\" + searchParam[key]\n                    } else if (key == \"partNumbers\") {\n                        search = search + \"&\" + key + \"=\" + searchParam[key]\n                    } else if (key == \"references\") {\n                        search = search + \"&\" + key + \"=\" + searchParam[key]\n                    }\n                }\n            });\n        }\n\n        this.props.SET_READYSEARCHPARAM(search)\n        const { userName, password } = this.props\n        return (\n            Api.getShipments(\"/shipments?page=\" + page + \"&size=\" + size + search, { userName: userName, password: password })\n                .then(\n                    (response) => {\n                        if (response != undefined) {\n                            this.state.data = response.elements ? response.elements : []\n                            this.state.total = response.total\n                        }\n                        this.setState({ loading: false })\n                    }).finally(() => {\n                        // this.setState({ loading: false})\n                    })\n        )\n    }\n\n    render() {\n        const { data, total, message, loading, itemsCountPerPage, activePage, showSearchForm } = this.state;\n        const { searchParam, userName, password } = this.props;\n        return (\n            <Col md={12} key={Math.random().toString(36).substr(2)} >\n                <Card\n                    key={Math.random().toString(36).substr(2)}\n                    cardTitle={\n                        <span onClick={() => { this.setState({ showSearchForm: !showSearchForm }) }} >\n                            جستجو\n                  &nbsp; <i className={showSearchForm ? \"ti-angle-down\" : \"ti-angle-up\"}></i>\n                        </span>\n                    }\n                >\n                    {showSearchForm ?\n                        <SearchForm\n                            searchParam={searchParam}\n                            searchValue={this.searchValue}\n                            userName={userName}\n                            password={password}\n                        />\n                        :\n                        <Row>\n                            {show.ShowSearchParam(this.props.searchParam)}\n                        </Row>\n                    }\n                </Card>\n                {message\n                    ? <ErrorMessage error={message} />\n                    :\n                    <Card key={Math.random().toString(36).substr(1)} >\n                        {loading ? <Preloader /> :\n                            <>\n                                <Pagination\n                                    total={total}\n                                    changeData={this.changeData}\n                                    activePage={activePage}\n                                    itemsCountPerPage={itemsCountPerPage}\n                                    changeSize={this.changeSize}\n                                />\n                                <Row>\n                                    <Col md={12} key={Math.random().toString(36).substr(2)}>\n                                        <Table\n                                            classTable=\" table-striped table-hover\"\n                                            classHeader=\"bg-inverse text-white text-center\"\n                                            classBody=\" directionLTR\"\n                                            theader={['#', \"waybillNumber\",\n                                                \"issuingDate\", \"deliveryDate\",\n                                                , \"shipper\", \"shipperCity\", \"consignee\",\n                                                \"consigneeCity\", \"paymentMethod\", \"chargeParty\", \"currentState\",\n                                                , \"activity\"]}\n                                            tbody={data.length > 0 ? data : []}\n                                            // tbody = {this.state.datatest}\n                                            defaultKey=\"shipment\"\n                                            sortTable={this.sortTable}\n                                            sort={true}\n                                            activePage={activePage}\n                                            indexVariable={this.state}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Pagination\n                                    total={total}\n                                    changeData={this.changeData}\n                                    activePage={activePage}\n                                    itemsCountPerPage={itemsCountPerPage}\n                                    changeSize={this.changeSize}\n                                />\n                            </>}\n                    </Card>}\n            </Col>\n        )\n    }\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        userName: store.Reducer.userName,\n        password: store.Reducer.password,\n        searchParam: store.Reducer.searchParam,\n    }\n}\n\nconst mapDispachToProps = (dispach) => {\n    return {\n        SET_AUTHENTICATE: (value) => { dispach(actionCreator.SET_AUTHENTICATE(value)) },\n        SET_SearchParam: (value) => { dispach(actionCreator.SET_SEARCHPARAM(value)) },\n        SET_READYSEARCHPARAM: (value) => { dispach(actionCreator.SET_READYSEARCHPARAM(value)) },\n        TOGGLE_MESSAGE: (value) => { dispach(actionCreator.TOGGLE_MESSAGE(value)) },\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(Shipper));\n"]},"metadata":{},"sourceType":"module"}