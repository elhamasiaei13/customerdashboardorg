{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport shallowEqualObjects from 'shallow-equal/objects';\nimport DateTimeInput from './DateTimeInput';\nimport { CalendarIcon, DeleteIcon } from './Picker/Icons';\nimport DatePicker from './DatePicker';\nimport './DateInputWithDialog.css';\nimport { formatGregorian, formatJalaali } from './dateUtils';\n\nvar DateInputWithDialog = /*#__PURE__*/function (_Component) {\n  _inherits(DateInputWithDialog, _Component);\n\n  function DateInputWithDialog(props) {\n    var _this;\n\n    _classCallCheck(this, DateInputWithDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateInputWithDialog).call(this, props));\n\n    _this.handleCalendar = function (e) {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n      }\n\n      _this.setState({\n        openDialog: !_this.state.openDialog\n      }, function () {\n        if (_this.state.openDialog && _this.props.onShow) {\n          _this.props.onShow();\n        }\n      });\n    };\n\n    _this.handleDateChange = function (date) {\n      // if(date && this.timeCache){\n      // date = new Date(date.getTime());\n      // date.setHours(this.timeCache.getHours(), this.timeCache.getMinutes(), this.timeCache.getSeconds());\n      // }\n      var newState = _this.createState(date);\n\n      _this.setState(newState, function () {\n        _this.fireOnChange();\n      });\n    };\n\n    _this.createState = function (date) {\n      var newState = {};\n\n      if (!date) {\n        newState.date = null;\n        newState.iso = '';\n        newState.formatted = '';\n      } else {\n        newState.date = date;\n        newState.iso = date.toISOString();\n        newState.formatted = _this.props.gregorian ? formatGregorian(date) : formatJalaali(date);\n      }\n\n      return newState;\n    };\n\n    _this.handleEmpty = function () {\n      _this.handleDateChange('');\n    };\n\n    _this.handleChange = function (event) {\n      var newState = {\n        date: event.target.date,\n        iso: event.target.value,\n        formatted: event.target.formatted\n      };\n\n      _this.setState(newState, function () {\n        _this.fireOnChange();\n      });\n    };\n\n    _this.fireOnChange = function () {\n      if (_this.props.onChange) {\n        var e = {\n          target: {\n            name: _this.props.name,\n            value: _this.state.iso,\n            formatted: _this.state.formatted,\n            date: _this.state.date\n          }\n        };\n\n        _this.props.onChange(e);\n      }\n    };\n\n    _this.inputRef = React.createRef();\n    var _date = null;\n\n    if (props.value) {\n      _date = new Date(props.value);\n      _this.timeCache = _date;\n\n      if (_date.toString() === 'Invalid Date') {\n        _date = null;\n      }\n    }\n\n    _this.state = _this.createState(_date);\n    _this.state.openDialog = false;\n    return _this;\n  }\n\n  _createClass(DateInputWithDialog, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.value) {\n        this.timeCache = new Date(nextProps.value);\n      }\n\n      if (nextProps.value !== this.state.iso || nextProps.value !== this.props.value || nextProps.gregorian !== this.props.gregorian || nextProps.ltr !== this.props.ltr || nextProps.numberFormat !== this.props.numberFormat) {\n        return true;\n      }\n\n      if (!shallowEqualObjects(nextProps.style, this.props.style)) {\n        return true;\n      }\n\n      if (nextProps.className !== this.props.className) {\n        return true;\n      }\n\n      if (nextProps.disabled !== this.props.disabled) {\n        return true;\n      }\n\n      if (nextProps.readOnly !== this.props.readOnly) {\n        return true;\n      }\n\n      if (nextState.openDialog !== this.state.openDialog) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          readOnly = _this$props.readOnly,\n          className = _this$props.className,\n          value = _this$props.value,\n          dialogContainerStyle = _this$props.dialogContainerStyle,\n          dialogContainerClassName = _this$props.dialogContainerClassName,\n          closeLabel = _this$props.closeLabel,\n          autoOk = _this$props.autoOk,\n          onDismiss = _this$props.onDismiss,\n          style = _this$props.style,\n          filterDate = _this$props.filterDate,\n          gregorian = _this$props.gregorian,\n          ltr = _this$props.ltr,\n          onChange = _this$props.onChange,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"readOnly\", \"className\", \"value\", \"dialogContainerStyle\", \"dialogContainerClassName\", \"closeLabel\", \"autoOk\", \"onDismiss\", \"style\", \"filterDate\", \"gregorian\", \"ltr\", \"onChange\"]);\n\n      var date = this.state.date;\n      return React.createElement(\"div\", {\n        ref: this.inputRef,\n        className: \"date-input-with-dialog-main\"\n      }, React.createElement(DateTimeInput, Object.assign({\n        className: \"date-input-with-dialog-input\".concat(ltr ? ' ltr' : '', \" \").concat(this.props.className ? this.props.className : ''),\n        gregorian: gregorian,\n        disabled: disabled,\n        readOnly: readOnly,\n        value: value,\n        onShowDialog: this.handleCalendar,\n        onChange: this.handleChange\n      }, rest)), React.createElement(\"div\", {\n        className: \"date-input-with-dialog-input-buttons date-input-with-dialog-calendar\".concat(ltr ? ' ltr' : ''),\n        onClick: this.handleCalendar\n      }, React.createElement(CalendarIcon, null)), React.createElement(\"div\", {\n        className: \"date-input-with-dialog-input-buttons date-input-with-dialog-empty\".concat(ltr ? ' ltr' : ''),\n        onClick: this.handleEmpty\n      }, React.createElement(DeleteIcon, null)), this.state.openDialog && React.createElement(React.Fragment, null, React.createElement(DatePicker, {\n        divRef: this.inputRef,\n        gregorian: gregorian,\n        onChange: function onChange(e) {\n          _this2.handleDateChange(e.target.value);\n\n          if (autoOk) {\n            _this2.handleCalendar();\n          }\n        },\n        cancelHandler: this.handleCalendar,\n        selectedDay: date,\n        style: dialogContainerStyle,\n        className: dialogContainerClassName,\n        closeLabel: closeLabel,\n        onDismiss: onDismiss,\n        filterDate: filterDate,\n        ltr: ltr,\n        pickTime: true\n      })));\n    }\n  }]);\n\n  return DateInputWithDialog;\n}(Component);\n\nexport default DateInputWithDialog;","map":null,"metadata":{},"sourceType":"module"}