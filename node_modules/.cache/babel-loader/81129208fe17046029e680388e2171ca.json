{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../store/Action';\nimport { useDispatch } from 'react-redux';\nimport moduleName from '../container/Test1';\nimport { bindActionCreators } from 'redux';\nimport { store } from '../../index';\nimport * as ErrorCode from '../../config/ErrorCode';\n\nconst ErrorCatchHandeling = (error, locality = \"\") => {\n  if (error.message !== \"Network Error\") {\n    if (error.response) {\n      if (error.response.status >= 400 && error.response.status < 500) {\n        if (error.response.status == 401) {\n          store.dispatch(actionCreator.SET_AUTHENTICATE(false));\n\n          if (locality = \"login\") {\n            store.dispatch(actionCreator.TOGGLE_MESSAGE({\n              show: true,\n              content: ErrorCode.API__INVALID_USERNAME_PASSWORD\n            }));\n          }\n        } else if (error.response.status == 404) {\n          store.dispatch(actionCreator.TOGGLE_MESSAGE({\n            show: true,\n            content: ErrorCode.API__OBJECT_NOT_FOUND\n          }));\n        } else {\n          store.dispatch(actionCreator.TOGGLE_MESSAGE({\n            show: true,\n            content: ErrorCode.API__CLIENT_ERROR\n          }));\n        }\n      } else if (error.response.status == 500) {\n        store.dispatch(actionCreator.TOGGLE_MESSAGE({\n          show: true,\n          content: ErrorCode.API__SERVER_ERROR\n        }));\n      } else {}\n    }\n  } else {\n    store.dispatch(actionCreator.TOGGLE_MESSAGE({\n      show: true,\n      content: ErrorCode.NETWORK_ERROR\n    }));\n  }\n};\n\nexport default ErrorCatchHandeling; // store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: false, content: \" \" }))\n// handleresponse(res, type)","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/container/ErrorCatchHandeling.js"],"names":["React","connect","actionCreator","useDispatch","moduleName","bindActionCreators","store","ErrorCode","ErrorCatchHandeling","error","locality","message","response","status","dispatch","SET_AUTHENTICATE","TOGGLE_MESSAGE","show","content","API__INVALID_USERNAME_PASSWORD","API__OBJECT_NOT_FOUND","API__CLIENT_ERROR","API__SERVER_ERROR","NETWORK_ERROR"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAO,KAAKC,SAAZ,MAA2B,wBAA3B;;AAEA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,QAAQ,GAAG,EAAnB,KAA0B;AAClD,MAAID,KAAK,CAACE,OAAN,KAAkB,eAAtB,EAAuC;AACnC,QAAIF,KAAK,CAACG,QAAV,EAAoB;AAChB,UAAIH,KAAK,CAACG,QAAN,CAAeC,MAAf,IAAyB,GAAzB,IAAgCJ,KAAK,CAACG,QAAN,CAAeC,MAAf,GAAwB,GAA5D,EAAiE;AAE7D,YAAIJ,KAAK,CAACG,QAAN,CAAeC,MAAf,IAAyB,GAA7B,EAAkC;AAE9BP,UAAAA,KAAK,CAACQ,QAAN,CAAeZ,aAAa,CAACa,gBAAd,CAA+B,KAA/B,CAAf;;AACA,cAAIL,QAAQ,GAAG,OAAf,EAAwB;AACpBJ,YAAAA,KAAK,CAACQ,QAAN,CAAeZ,aAAa,CAACc,cAAd,CAA6B;AAAEC,cAAAA,IAAI,EAAE,IAAR;AAAcC,cAAAA,OAAO,EAAEX,SAAS,CAACY;AAAjC,aAA7B,CAAf;AACH;AACJ,SAND,MAMO,IAAIV,KAAK,CAACG,QAAN,CAAeC,MAAf,IAAyB,GAA7B,EAAkC;AAErCP,UAAAA,KAAK,CAACQ,QAAN,CAAeZ,aAAa,CAACc,cAAd,CAA6B;AAAEC,YAAAA,IAAI,EAAE,IAAR;AAAcC,YAAAA,OAAO,EAAEX,SAAS,CAACa;AAAjC,WAA7B,CAAf;AACH,SAHM,MAGA;AAEHd,UAAAA,KAAK,CAACQ,QAAN,CAAeZ,aAAa,CAACc,cAAd,CAA6B;AAAEC,YAAAA,IAAI,EAAE,IAAR;AAAcC,YAAAA,OAAO,EAAEX,SAAS,CAACc;AAAjC,WAA7B,CAAf;AACH;AACJ,OAfD,MAeO,IAAIZ,KAAK,CAACG,QAAN,CAAeC,MAAf,IAAyB,GAA7B,EAAkC;AAErCP,QAAAA,KAAK,CAACQ,QAAN,CAAeZ,aAAa,CAACc,cAAd,CAA6B;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,OAAO,EAAEX,SAAS,CAACe;AAAjC,SAA7B,CAAf;AACH,OAHM,MAGA,CACN;AACJ;AAEJ,GAxBD,MAwBO;AAEHhB,IAAAA,KAAK,CAACQ,QAAN,CAAeZ,aAAa,CAACc,cAAd,CAA6B;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAEX,SAAS,CAACgB;AAAjC,KAA7B,CAAf;AACH;AACJ,CA7BD;;AAiCA,eAAef,mBAAf,C,CAEA;AAEA","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../store/Action';\nimport { useDispatch } from 'react-redux';\nimport moduleName from '../container/Test1'\nimport { bindActionCreators } from 'redux';\nimport { store } from '../../index';\nimport * as ErrorCode from '../../config/ErrorCode';\n\nconst ErrorCatchHandeling = (error, locality = \"\") => {\n    if (error.message !== \"Network Error\") {\n        if (error.response) {\n            if (error.response.status >= 400 && error.response.status < 500) {\n\n                if (error.response.status == 401) {\n\n                    store.dispatch(actionCreator.SET_AUTHENTICATE(false))\n                    if (locality = \"login\") {\n                        store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__INVALID_USERNAME_PASSWORD }))\n                    }\n                } else if (error.response.status == 404) {\n\n                    store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__OBJECT_NOT_FOUND }))\n                } else {\n\n                    store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__CLIENT_ERROR }))\n                }\n            } else if (error.response.status == 500) {\n\n                store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.API__SERVER_ERROR }))\n            } else {\n            }\n        }\n\n    } else {\n\n        store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: true, content: ErrorCode.NETWORK_ERROR }))\n    }\n}\n\n\n\nexport default ErrorCatchHandeling;\n\n// store.dispatch(actionCreator.TOGGLE_MESSAGE({ show: false, content: \" \" }))\n\n// handleresponse(res, type)\n"]},"metadata":{},"sourceType":"module"}