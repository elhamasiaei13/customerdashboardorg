{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport { mapToFarsi, isTheSameDay } from '../dateUtils';\nimport jalaali from 'jalaali-js';\n\nvar Days = /*#__PURE__*/function (_React$Component) {\n  _inherits(Days, _React$Component);\n\n  function Days(props) {\n    var _this;\n\n    _classCallCheck(this, Days);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Days).call(this, props));\n\n    _this.isDateEnabled = function (date) {\n      if (_this.props.filterDate) {\n        return _this.props.filterDate(date);\n      }\n\n      return true;\n    };\n\n    _this.state = {\n      selectedDay: _this.props.selectedDay\n    };\n    var now = new Date();\n    _this.today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    return _this;\n  }\n\n  _createClass(Days, [{\n    key: \"dayClicked\",\n    value: function dayClicked(element, e) {\n      var _this2 = this;\n\n      if (e) {\n        e.preventDefault();\n      }\n\n      if (!!this.state.selectedDay) {\n        var selectedRef = this.state.selectedDay.getTime().toString();\n\n        if (!!this.refs[selectedRef]) {\n          this.refs[selectedRef].className = this.refs[selectedRef].className.replace('selected', '');\n        }\n      }\n\n      this.setState({\n        selectedDay: element\n      }, function () {\n        _this2.refs[element.getTime().toString()].className += ' selected';\n\n        _this2.props.clickEvent(element);\n      });\n    }\n  }, {\n    key: \"renderDays\",\n    value: function renderDays() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          gregorian = _this$props.gregorian,\n          firstDay = _this$props.firstDay,\n          selectedYear = _this$props.selectedYear,\n          currentMonth = _this$props.currentMonth,\n          selectedDay = _this$props.selectedDay,\n          daysCount = _this$props.daysCount;\n      var year = selectedYear;\n      var month = currentMonth;\n      var result = [];\n\n      var _loop = function _loop(i) {\n        var addedClass = '';\n        var marginRight = '0%';\n        var number = mapToFarsi(i);\n        if (i === 1) marginRight = firstDay * 14.28 + '%';\n        var date = void 0;\n\n        if (gregorian) {\n          date = new Date(year, month - 1, i);\n        } else {\n          var g = jalaali.toGregorian(year, month, i);\n          date = new Date(g.gy, g.gm - 1, g.gd);\n        } // console.log(this.today, date)\n\n\n        if (_this3.today && date.getTime() === _this3.today.getTime()) addedClass += ' today';\n        if (selectedDay && isTheSameDay(date, selectedDay)) addedClass += ' selected';\n\n        var enable = _this3.isDateEnabled(date);\n\n        if (!enable) {\n          result.push(React.createElement(\"div\", {\n            className: 'day-items' + addedClass,\n            ref: date.getTime().toString(),\n            key: date.getTime().toString(),\n            style: {\n              background: '#ccc',\n              cursor: 'default',\n              marginRight: marginRight\n            }\n          }, number));\n        } else if (enable) {\n          result.push(React.createElement(\"div\", {\n            className: 'day-items' + addedClass,\n            ref: date.getTime().toString(),\n            key: date.getTime().toString(),\n            style: {\n              marginRight: marginRight\n            },\n            onClick: function onClick(e) {\n              return _this3.dayClicked(date, e);\n            }\n          }, number));\n        }\n      };\n\n      for (var i = 1; i <= daysCount; i++) {\n        _loop(i);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"JC-days\"\n      }, React.createElement(\"div\", {\n        className: \"holder\"\n      }, !!this.props.daysCount && this.renderDays()));\n    }\n  }]);\n\n  return Days;\n}(React.Component);\n\nexport default Days;","map":null,"metadata":{},"sourceType":"module"}