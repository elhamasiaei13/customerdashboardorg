{"ast":null,"code":"var _jsxFileName = \"/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/presentational/chart/MapChart.js\";\nimport React from \"react\";\nimport mapData from \"../../../config/Api\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\"; // import $ from \"jquery\";\n// import $div from \"jquery\";\n\nrequire(\"highcharts/modules/map\")(Highcharts);\n\nconst dataTest = [{\n  id: \"IR.AL\",\n  name: \"t1\",\n  count: \"1050\",\n  outboundParcels: 51.507222,\n  inboundParcels: -0.1275\n}, {\n  id: \"IR.AL\",\n  name: \"t2\",\n  count: \"1050\",\n  outboundParcels: 51.507222,\n  inboundParcels: -0.1275\n}];\n\nclass MapChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapData: null\n    };\n    this.options = {\n      title: {\n        display: false,\n        style: {\n          color: \"blue\",\n          display: \"none\"\n        }\n      },\n      chart: {\n        backgroundColor: \"transparent\",\n        // type: \"map\",\n        map: 'countries/gb/gb-all' // map: null\n\n      },\n      mapNavigation: {\n        enabled: true,\n        enableButtons: false\n      },\n      credits: {\n        enabled: false\n      },\n      colorAxis: {\n        dataClasses: []\n      },\n      tooltip: {\n        split: false,\n        // distance: 30,\n        padding: 8,\n        pointFormatter: function () {\n          return 'The value for <b>' + this.name + '</b> is <b>' + this.count;\n        }\n      },\n      series: [{\n        name: \"delivered\",\n        dataLabels: {\n          // enabled: true,\n          color: \"#FFFFFF\",\n          format: \"{point.postal-code}\",\n          style: {\n            textTransform: \"uppercase\"\n          }\n        },\n        cursor: \"pointer\",\n        joinBy: \"postal-code\",\n        data: dataTest\n      }, {\n        name: 'Separators',\n        type: 'mapline',\n        nullColor: 'blue',\n        // showInLegend: false,\n        enableMouseTracking: false\n      }]\n    }; // get the world map data\n\n    mapData.getWorld().then(r => {\n      this.setState({\n        mapData: r.data\n      }, () => {\n        this.options.series[0].data = []; //make sure data is empty before  fill\n\n        this.options[\"chart\"][\"map\"] = this.state.mapData; // set the map data of the graph (using the world graph)\n        // this.options.row,\n        //     $div = $('<div></div>')\n        //         .dialog({\n        //             title: this.name,\n        //             width: 320,\n        //             height: 300\n        //         });\n        // filling up some dummy data with values 1 and 2\n        // instead of using the google sheet\n\n        for (let i in this.state.mapData[\"features\"]) {\n          let mapInfo = this.state.mapData[\"features\"][i];\n          var postalCode = mapInfo.properties[\"postal-code\"];\n          var name = mapInfo[\"properties\"][\"name\"];\n          var value = i % 2 + 1;\n          var type = value === 1 ? \"widget name one\" : \"widget name two\";\n          let index1 = dataTest.findIndex(item => {\n            return item.id === this.id;\n          });\n          let index = Math.abs(index1);\n          let count = dataTest[index].count ? dataTest[index].count : \"op\";\n          this.options.series[0].data.push({\n            value: value,\n            name: name,\n            \"postal-code\": postalCode,\n            // row: row,\n            type: type,\n            // id: id,\n            count: count,\n            color: \"#f1f7fa\" // color: \"#e5e8ed\"\n\n          }); // }\n        } // updating the map options\n\n\n        this.setState({\n          mapOptions: this.options\n        });\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.mapOptions ? React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      constructorType: \"mapChart\",\n      options: this.state.mapOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }) : \"\");\n  }\n\n}\n\nexport default MapChart;","map":{"version":3,"sources":["/home/dev-04/parvan/reactProjects/customerdash-fe/src/componenets/presentational/chart/MapChart.js"],"names":["React","mapData","Highcharts","HighchartsReact","require","dataTest","id","name","count","outboundParcels","inboundParcels","MapChart","Component","constructor","props","state","options","title","display","style","color","chart","backgroundColor","map","mapNavigation","enabled","enableButtons","credits","colorAxis","dataClasses","tooltip","split","padding","pointFormatter","series","dataLabels","format","textTransform","cursor","joinBy","data","type","nullColor","enableMouseTracking","getWorld","then","r","setState","i","mapInfo","postalCode","properties","value","index1","findIndex","item","index","Math","abs","push","mapOptions","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport mapData from \"../../../config/Api\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n// import $ from \"jquery\";\n// import $div from \"jquery\";\nrequire(\"highcharts/modules/map\")(Highcharts);\n\nconst dataTest = [\n    { id: \"IR.AL\",name:\"t1\", count: \"1050\", outboundParcels: 51.507222, inboundParcels: -0.1275 },\n    { id: \"IR.AL\",name:\"t2\",  count: \"1050\", outboundParcels: 51.507222, inboundParcels: -0.1275 },\n\n]\n\nclass MapChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mapData: null\n        };\n\n\n        this.options = {\n            title: {\n                display:false,\n                style: {\n                    color: \"blue\",\n                    display:\"none\"\n                }\n            },\n            chart: {\n                backgroundColor: \"transparent\",\n                // type: \"map\",\n                map: 'countries/gb/gb-all',\n                // map: null\n            },\n            mapNavigation: {\n                enabled: true,\n                enableButtons: false\n            },\n            credits: {\n                enabled: false\n            },\n            colorAxis: {\n                dataClasses: [ ]\n            },\n            tooltip: {\n                split: false ,\n                // distance: 30,\n                padding: 8,\n                pointFormatter: function () {\n                    return ('The value for <b>'+this.name +'</b> is <b>'+ this.count);\n                  }\n               \n            },\n            \n           \n            series: [\n                {\n                    name: \"delivered\",\n                    dataLabels: {\n                        // enabled: true,\n                        color: \"#FFFFFF\",\n                        format: \"{point.postal-code}\",\n                        style: {\n                            textTransform: \"uppercase\"\n                        }\n                    },\n                   \n                    cursor: \"pointer\",\n                    joinBy: \"postal-code\",\n                    data: dataTest ,\n                  \n                },\n                {\n                    name: 'Separators',\n                    type: 'mapline',\n                    nullColor: 'blue',\n                    // showInLegend: false,\n                    enableMouseTracking: false\n                }\n            ]\n        };\n\n        // get the world map data\n        mapData.getWorld().then(r => {\n            this.setState({ mapData: r.data }, () => {\n                this.options.series[0].data = []; //make sure data is empty before  fill\n                this.options[\"chart\"][\"map\"] = this.state.mapData; // set the map data of the graph (using the world graph)\n                // this.options.row,\n                //     $div = $('<div></div>')\n                //         .dialog({\n                //             title: this.name,\n                //             width: 320,\n                //             height: 300\n                //         });\n\n                // filling up some dummy data with values 1 and 2\n                // instead of using the google sheet\n                for (let i in this.state.mapData[\"features\"]) {\n                    let mapInfo = this.state.mapData[\"features\"][i];\n                        var postalCode = mapInfo.properties[\"postal-code\"];\n\n                        var name = mapInfo[\"properties\"][\"name\"];\n                        var value = (i % 2) + 1;\n                        var type = value === 1 ? \"widget name one\" : \"widget name two\";\n                        let index1 = dataTest.findIndex((item) => { return item.id === this.id })\n                        let index = Math.abs(index1)\n                        let count = dataTest[index].count ? dataTest[index].count : \"op\"\n                        this.options.series[0].data.push({\n                            value: value,\n                            name: name,\n                            \"postal-code\": postalCode,\n                            // row: row,\n                            type: type,\n                            // id: id,\n                            count: count,\n                            color: \"#f1f7fa\"\n                            // color: \"#e5e8ed\"\n                        });\n                    // }\n                }\n                // updating the map options\n                this.setState({ mapOptions: this.options });\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n\n                {this.state.mapOptions ? (\n                    <HighchartsReact\n                        highcharts={Highcharts}\n                        constructorType={\"mapChart\"}\n                        options={this.state.mapOptions}\n                    />\n                ) : (\n                        \"\"\n                    )}\n            </div>\n        );\n    }\n}\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}