import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import "./DateTimeInput.css";
import Years from './Picker/Years';
import Months from './Picker/Months';
import Days from './Picker/Days';
import Hours from './Picker/Hours';
import Minutes from './Picker/Minutes';
import jalaali from 'jalaali-js';
import { calcFirstDayOfMonth, isNotEqualDate, gregorianMonthLength } from './dateUtils';
import { createPortal } from 'react-dom';
var modalRoot = null;

var DatePicker =
/*#__PURE__*/
function (_Component) {
  _inherits(DatePicker, _Component);

  function DatePicker(props) {
    var _divRef$current, _document;

    var _this;

    _classCallCheck(this, DatePicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatePicker).call(this, props));

    _this.componentDidMount = function () {
      if (document && document.body && document.body.style) document.body.style.overflow = 'hidden';
    };

    _this.componentWillUnmount = function () {
      if (document && document.body && document.body.style) document.body.style.overflow = '';
    };

    _this.cancelPicker = function (e) {
      e.preventDefault();

      if (_this.props.onDismiss) {
        _this.props.onDismiss();
      }

      _this.props.cancelHandler();
    };

    _this.daysClicked = function (dayDate) {
      if (isNotEqualDate(_this.state.selectedDay, dayDate)) {
        var newDate;

        if (_this.props.pickTime) {
          var _this$state = _this.state,
              selectedHour = _this$state.selectedHour,
              selectedMinute = _this$state.selectedMinute;
          newDate = new Date(dayDate.getTime());
          newDate.setHours(selectedHour);
          newDate.setMinutes(selectedMinute);
        } else {
          newDate = new Date(Date.UTC(dayDate.getFullYear(), dayDate.getMonth(), dayDate.getDate(), 0, 0));
        }

        _this.setState({
          selectedDay: newDate
        }, _this.fireChange);
      } else {
        _this.props.cancelHandler();
      }
    };

    _this.fireChange = function () {
      _this.props.onChange({
        target: {
          name: _this.props.name,
          value: _this.state.selectedDay
        }
      });
    };

    _this.monthsClicked = function (month) {
      var _this$state2 = _this.state,
          selectedYear = _this$state2.selectedYear,
          gregorian = _this$state2.gregorian;
      var currentMonth, daysCount, selectedMonthFirstDay;

      if (month === 0) {
        currentMonth = 12;
        selectedYear = selectedYear - 1;
      } else if (month === 13) {
        currentMonth = 1;
        selectedYear = selectedYear + 1;
      } else {
        currentMonth = month;
      }

      daysCount = gregorian ? gregorianMonthLength(selectedYear, currentMonth) : jalaali.jalaaliMonthLength(selectedYear, currentMonth);
      selectedMonthFirstDay = calcFirstDayOfMonth(selectedYear, currentMonth, gregorian);

      _this.setState({
        currentMonth: currentMonth,
        daysCount: daysCount,
        selectedYear: selectedYear,
        selectedMonthFirstDay: selectedMonthFirstDay
      });
    };

    _this.yearSelected = function (selectedYear) {
      var selectedMonthFirstDay, daysCount;
      selectedMonthFirstDay = calcFirstDayOfMonth(selectedYear, _this.state.currentMonth, _this.state.gregorian);
      daysCount = _this.state.gregorian ? gregorianMonthLength(selectedYear, _this.state.currentMonth) : jalaali.jalaaliMonthLength(selectedYear, _this.state.currentMonth);

      _this.setState({
        selectedYear: selectedYear,
        selectedMonthFirstDay: selectedMonthFirstDay,
        daysCount: daysCount
      });
    };

    _this.hourSelected = function (selectedHour) {
      var selectedDay = _this.state.selectedDay;

      if (selectedDay) {
        selectedDay.setHours(selectedHour);
      }

      _this.setState({
        selectedDay: selectedDay,
        selectedHour: selectedHour
      }, _this.fireChange);
    };

    _this.minuteSelected = function (selectedMinute) {
      var selectedDay = _this.state.selectedDay;

      if (selectedDay) {
        selectedDay.setMinutes(selectedMinute);
      }

      _this.setState({
        selectedDay: selectedDay,
        selectedMinute: selectedMinute
      }, _this.fireChange);
    };

    _this.gregorianPicker = function () {
      var gregorian = !_this.state.gregorian;
      var selectedDay = _this.state.selectedDay;
      var currentMonth, daysCount, selectedYear, selectedMonthFirstDay;

      if (gregorian) {
        var j = selectedDay ? selectedDay : new Date();
        selectedYear = j.getFullYear();
        currentMonth = j.getMonth() + 1;
      } else {
        var _j = jalaali.toJalaali(selectedDay ? selectedDay : new Date());

        selectedYear = _j.jy;
        currentMonth = _j.jm;
      }

      daysCount = gregorian ? gregorianMonthLength(selectedYear, currentMonth) : jalaali.jalaaliMonthLength(selectedYear, currentMonth);
      selectedMonthFirstDay = calcFirstDayOfMonth(selectedYear, currentMonth, gregorian);

      _this.setState({
        gregorian: gregorian,
        currentMonth: currentMonth,
        daysCount: daysCount,
        selectedYear: selectedYear,
        selectedMonthFirstDay: selectedMonthFirstDay
      });
    };

    if (!modalRoot) {
      modalRoot = document.createElement('div'); // modalRoot.className = 'JDialogModal';

      document.body.appendChild(modalRoot);
    }

    var _gregorian = props.gregorian,
        _selectedDay = props.selectedDay,
        _props$pickTime = props.pickTime,
        pickTime = _props$pickTime === void 0 ? false : _props$pickTime,
        style = props.style,
        ltr = props.ltr,
        divRef = props.divRef;
    var currentDay = _selectedDay;

    if (!currentDay) {
      currentDay = new Date();
    } else {
      currentDay = new Date(currentDay.getTime());
    }

    if (!pickTime) {
      currentDay.setHours(0);
      currentDay.setMinutes(0);
    } // currentDay.setSeconds(0);


    var _selectedYear, _currentMonth, _selectedMonthFirstDay, _daysCount, _selectedHour, _selectedMinute;

    if (_gregorian) {
      var j = currentDay;
      _selectedYear = j.getFullYear();
      _currentMonth = j.getMonth() + 1;
    } else {
      var _j2 = jalaali.toJalaali(currentDay);

      _selectedYear = _j2.jy;
      _currentMonth = _j2.jm;
    }

    _daysCount = _gregorian ? gregorianMonthLength(_selectedYear, _currentMonth) : jalaali.jalaaliMonthLength(_selectedYear, _currentMonth);
    _selectedMonthFirstDay = calcFirstDayOfMonth(_selectedYear, _currentMonth, _gregorian);
    _selectedHour = currentDay.getHours();
    _selectedMinute = currentDay.getMinutes(); // console.log({selectedDay})

    var myStyle = style;

    if ((divRef === null || divRef === void 0 ? void 0 : (_divRef$current = divRef.current) === null || _divRef$current === void 0 ? void 0 : _divRef$current.getBoundingClientRect) && ((_document = document) === null || _document === void 0 ? void 0 : _document.documentElement)) {
      var rect = divRef.current.getBoundingClientRect();
      var ww = document.documentElement.clientWidth;
      var wh = document.documentElement.clientHeight;
      var dialogHeight = pickTime ? 435 : 330;
      var dialogWidth = 320;
      myStyle = _objectSpread({}, style, {
        // position: 'fixed',
        top: rect.top + rect.height + 5
      });
      if (myStyle.top < 10) myStyle.top = 10;
      if (myStyle.top + dialogHeight > wh) myStyle.top = wh - dialogHeight; // const wh = (window.innerHeight || document.documentElement.clientHeight);
      // const ww = (window.innerWidth || document.documentElement.clientWidth);
      // debugger;

      if (ltr) {
        myStyle.left = rect.left;
        myStyle.right = 'unset';
        if (myStyle.left < 10) myStyle.left = 10;
        if (myStyle.left + dialogWidth > ww) myStyle.left = ww - dialogWidth;
      } else {
        myStyle.left = 'unset';
        myStyle.right = ww - rect.right;
        if (myStyle.right < 10) myStyle.right = 10;
        if (myStyle.right + dialogWidth > ww) myStyle.right = ww - dialogWidth;
      }
    }

    _this.state = {
      gregorian: _gregorian,
      selectedYear: _selectedYear,
      currentMonth: _currentMonth,
      selectedMonthFirstDay: _selectedMonthFirstDay,
      daysCount: _daysCount,
      selectedDay: _selectedDay ? _selectedDay : null,
      selectedHour: _selectedHour,
      selectedMinute: _selectedMinute,
      style: myStyle
    };
    return _this;
  }

  _createClass(DatePicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          _this$props$closeLabe = _this$props.closeLabel,
          closeLabel = _this$props$closeLabe === void 0 ? 'بستن' : _this$props$closeLabe,
          filterDate = _this$props.filterDate,
          ltr = _this$props.ltr,
          _this$props$pickTime = _this$props.pickTime,
          pickTime = _this$props$pickTime === void 0 ? false : _this$props$pickTime;
      var _this$state3 = this.state,
          gregorian = _this$state3.gregorian,
          daysCount = _this$state3.daysCount,
          selectedDay = _this$state3.selectedDay,
          currentMonth = _this$state3.currentMonth,
          selectedYear = _this$state3.selectedYear,
          selectedMonthFirstDay = _this$state3.selectedMonthFirstDay,
          selectedHour = _this$state3.selectedHour,
          selectedMinute = _this$state3.selectedMinute,
          style = _this$state3.style;
      return createPortal(React.createElement(React.Fragment, null, React.createElement("div", {
        className: 'OutSideClick',
        onClick: this.cancelPicker
      }, " "), React.createElement("div", {
        className: "JDatePicker".concat(ltr ? ' ltr' : '', " ").concat(className ? className : ''),
        style: style,
        onClick: function onClick(e) {
          e.preventDefault();
        }
      }, React.createElement(Years, {
        gregorian: gregorian,
        changeEvent: function changeEvent(returnedYear) {
          return _this2.yearSelected(returnedYear);
        },
        year: selectedYear
      }), React.createElement(Months, {
        gregorian: gregorian,
        clickEvent: function clickEvent(returnedMonth) {
          return _this2.monthsClicked(returnedMonth);
        },
        month: currentMonth
      }), React.createElement("div", {
        className: "days-titles"
      }, React.createElement("div", null, "\u0634"), React.createElement("div", null, "\u06CC"), React.createElement("div", null, "\u062F"), React.createElement("div", null, "\u0633"), React.createElement("div", null, "\u0686"), React.createElement("div", null, "\u067E"), React.createElement("div", null, "\u062C")), React.createElement(Days, {
        gregorian: gregorian,
        selectedYear: selectedYear,
        selectedDay: selectedDay,
        currentMonth: currentMonth,
        daysCount: daysCount,
        firstDay: selectedMonthFirstDay,
        clickEvent: this.daysClicked,
        filterDate: filterDate
      }), pickTime && React.createElement("div", {
        className: "JC-Clock"
      }, React.createElement(Hours, {
        changeEvent: function changeEvent(returnedHour) {
          return _this2.hourSelected(returnedHour);
        },
        hour: selectedHour
      }), "\xA0:\xA0", React.createElement(Minutes, {
        changeEvent: function changeEvent(returnedMinute) {
          return _this2.minuteSelected(returnedMinute);
        },
        minute: selectedMinute
      })), React.createElement("div", {
        className: "JC-Buttons"
      }, React.createElement("button", {
        onClick: this.cancelPicker
      }, closeLabel), !gregorian && React.createElement("button", {
        onClick: this.gregorianPicker
      }, 'میلادی'), gregorian && React.createElement("button", {
        onClick: this.gregorianPicker
      }, 'شمسی')))), modalRoot);
    }
  }]);

  return DatePicker;
}(Component);

export default DatePicker;